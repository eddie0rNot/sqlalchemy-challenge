{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt\n",
    "from datetime import date\n",
    "from datetime import datetime\n",
    "from datetime import timedelta\n",
    "from flask import Flask, jsonify"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python SQL toolkit and Object Relational Mapper\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func, inspect, distinct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create engine to hawaii.sqlite\n",
    "engine = create_engine(\"sqlite:///hawaii.sqlite\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "conn = engine.connect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read in station and measurement data\n",
    "station_data = pd.read_sql(\"SELECT * FROM Station\", conn)\n",
    "measurement_data = pd.read_sql(\"SELECT * FROM Measurement\", conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>station</th>\n",
       "      <th>name</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>elevation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>WAIKIKI 717.2, HI US</td>\n",
       "      <td>21.2716</td>\n",
       "      <td>-157.8168</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>USC00513117</td>\n",
       "      <td>KANEOHE 838.1, HI US</td>\n",
       "      <td>21.4234</td>\n",
       "      <td>-157.8015</td>\n",
       "      <td>14.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>USC00514830</td>\n",
       "      <td>KUALOA RANCH HEADQUARTERS 886.9, HI US</td>\n",
       "      <td>21.5213</td>\n",
       "      <td>-157.8374</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>USC00517948</td>\n",
       "      <td>PEARL CITY, HI US</td>\n",
       "      <td>21.3934</td>\n",
       "      <td>-157.9751</td>\n",
       "      <td>11.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>USC00518838</td>\n",
       "      <td>UPPER WAHIAWA 874.3, HI US</td>\n",
       "      <td>21.4992</td>\n",
       "      <td>-158.0111</td>\n",
       "      <td>306.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id      station                                    name  latitude  \\\n",
       "0   1  USC00519397                    WAIKIKI 717.2, HI US   21.2716   \n",
       "1   2  USC00513117                    KANEOHE 838.1, HI US   21.4234   \n",
       "2   3  USC00514830  KUALOA RANCH HEADQUARTERS 886.9, HI US   21.5213   \n",
       "3   4  USC00517948                       PEARL CITY, HI US   21.3934   \n",
       "4   5  USC00518838              UPPER WAHIAWA 874.3, HI US   21.4992   \n",
       "\n",
       "   longitude  elevation  \n",
       "0  -157.8168        3.0  \n",
       "1  -157.8015       14.6  \n",
       "2  -157.8374        7.0  \n",
       "3  -157.9751       11.9  \n",
       "4  -158.0111      306.6  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "station_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>station</th>\n",
       "      <th>date</th>\n",
       "      <th>prcp</th>\n",
       "      <th>tobs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0.08</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>2010-01-02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>2010-01-03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>2010-01-04</td>\n",
       "      <td>0.00</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>2010-01-06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>73.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id      station        date  prcp  tobs\n",
       "0   1  USC00519397  2010-01-01  0.08  65.0\n",
       "1   2  USC00519397  2010-01-02  0.00  63.0\n",
       "2   3  USC00519397  2010-01-03  0.00  74.0\n",
       "3   4  USC00519397  2010-01-04  0.00  76.0\n",
       "4   5  USC00519397  2010-01-06   NaN  73.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "measurement_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id_station</th>\n",
       "      <th>station</th>\n",
       "      <th>name</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>elevation</th>\n",
       "      <th>id_measurement</th>\n",
       "      <th>date</th>\n",
       "      <th>prcp</th>\n",
       "      <th>tobs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>WAIKIKI 717.2, HI US</td>\n",
       "      <td>21.2716</td>\n",
       "      <td>-157.8168</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010-01-01</td>\n",
       "      <td>0.08</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>WAIKIKI 717.2, HI US</td>\n",
       "      <td>21.2716</td>\n",
       "      <td>-157.8168</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2010-01-02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>WAIKIKI 717.2, HI US</td>\n",
       "      <td>21.2716</td>\n",
       "      <td>-157.8168</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010-01-03</td>\n",
       "      <td>0.00</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>WAIKIKI 717.2, HI US</td>\n",
       "      <td>21.2716</td>\n",
       "      <td>-157.8168</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4</td>\n",
       "      <td>2010-01-04</td>\n",
       "      <td>0.00</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>WAIKIKI 717.2, HI US</td>\n",
       "      <td>21.2716</td>\n",
       "      <td>-157.8168</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "      <td>2010-01-06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>73.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id_station      station                  name  latitude  longitude  \\\n",
       "0           1  USC00519397  WAIKIKI 717.2, HI US   21.2716  -157.8168   \n",
       "1           1  USC00519397  WAIKIKI 717.2, HI US   21.2716  -157.8168   \n",
       "2           1  USC00519397  WAIKIKI 717.2, HI US   21.2716  -157.8168   \n",
       "3           1  USC00519397  WAIKIKI 717.2, HI US   21.2716  -157.8168   \n",
       "4           1  USC00519397  WAIKIKI 717.2, HI US   21.2716  -157.8168   \n",
       "\n",
       "   elevation  id_measurement        date  prcp  tobs  \n",
       "0        3.0               1  2010-01-01  0.08  65.0  \n",
       "1        3.0               2  2010-01-02  0.00  63.0  \n",
       "2        3.0               3  2010-01-03  0.00  74.0  \n",
       "3        3.0               4  2010-01-04  0.00  76.0  \n",
       "4        3.0               5  2010-01-06   NaN  73.0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " # Merge the columns\n",
    "combined_data = pd.merge(station_data, measurement_data, on=\"station\", how=\"inner\",suffixes=('_station', '_measurement'))\n",
    "combined_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reflect an existing database into a new model\n",
    "\n",
    "# reflect the tables\n",
    "\n",
    "# Declare a Base using `automap_base()`\n",
    "Base = automap_base()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    " # Use the Base class to reflect the database tables\n",
    "Base.prepare(engine, reflect=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['measurement', 'station']"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# View all of the classes that automap found\n",
    "    \n",
    "Base.classes.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save references to each table\n",
    "\n",
    "Station = Base.classes.station\n",
    "Measurement = Base.classes.measurement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create our session (link) from Python to the DB\n",
    "    \n",
    "session = Session(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id INTEGER\n",
      "station TEXT\n",
      "date TEXT\n",
      "prcp FLOAT\n",
      "tobs FLOAT\n"
     ]
    }
   ],
   "source": [
    "inspector = inspect(engine)\n",
    "columns = inspector.get_columns('Measurement')\n",
    "for c in columns:\n",
    "    print(c['name'], c[\"type\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('2017-08-23')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " # Find the most recent date in the data set.\n",
    "    \n",
    "end_datex = session.query(Measurement.date).order_by(Measurement.date.desc()).first()\n",
    "end_datex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2016-08-23\n"
     ]
    }
   ],
   "source": [
    "# Design a query to retrieve the last 12 months of precipitation data and plot the results. \n",
    "# Starting from the most recent data point in the database. \n",
    "\n",
    "# Calculate the date one year from the last date in data set.\n",
    "\n",
    "start_date = dt.date(2017,8,23) - dt.timedelta(days=365)\n",
    "print(start_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(2724, 'USC00519397', '2017-08-23', 0.0, 81.0),\n",
       " (7635, 'USC00514830', '2017-08-23', 0.0, 82.0),\n",
       " (12187, 'USC00519523', '2017-08-23', 0.08, 82.0),\n",
       " (19550, 'USC00516128', '2017-08-23', 0.45, 76.0),\n",
       " (2723, 'USC00519397', '2017-08-22', 0.0, 82.0),\n",
       " (12186, 'USC00519523', '2017-08-22', 0.0, 82.0),\n",
       " (19549, 'USC00516128', '2017-08-22', 0.5, 76.0),\n",
       " (2722, 'USC00519397', '2017-08-21', 0.0, 81.0),\n",
       " (7634, 'USC00514830', '2017-08-21', 0.02, 79.0),\n",
       " (12185, 'USC00519523', '2017-08-21', None, 82.0),\n",
       " (19548, 'USC00516128', '2017-08-21', 0.56, 76.0),\n",
       " (2721, 'USC00519397', '2017-08-20', 0.0, 81.0),\n",
       " (7633, 'USC00514830', '2017-08-20', 0.01, 80.0),\n",
       " (19547, 'USC00516128', '2017-08-20', None, 78.0),\n",
       " (2720, 'USC00519397', '2017-08-19', 0.0, 79.0),\n",
       " (7632, 'USC00514830', '2017-08-19', 0.0, 80.0),\n",
       " (12184, 'USC00519523', '2017-08-19', None, 85.0),\n",
       " (19546, 'USC00516128', '2017-08-19', 0.09, 71.0),\n",
       " (2719, 'USC00519397', '2017-08-18', 0.0, 80.0),\n",
       " (7631, 'USC00514830', '2017-08-18', 0.0, 77.0),\n",
       " (14959, 'USC00519281', '2017-08-18', 0.06, 79.0),\n",
       " (19545, 'USC00516128', '2017-08-18', None, 76.0),\n",
       " (7630, 'USC00514830', '2017-08-17', 0.0, 78.0),\n",
       " (12183, 'USC00519523', '2017-08-17', 0.05, 83.0),\n",
       " (14958, 'USC00519281', '2017-08-17', 0.01, 76.0),\n",
       " (19544, 'USC00516128', '2017-08-17', 0.13, 72.0),\n",
       " (7629, 'USC00514830', '2017-08-16', 0.0, 82.0),\n",
       " (12182, 'USC00519523', '2017-08-16', 0.07, 79.0),\n",
       " (14957, 'USC00519281', '2017-08-16', 0.12, 76.0),\n",
       " (19543, 'USC00516128', '2017-08-16', 0.42, 71.0),\n",
       " (2718, 'USC00519397', '2017-08-15', 0.02, 78.0),\n",
       " (7628, 'USC00514830', '2017-08-15', 0.0, 82.0),\n",
       " (12181, 'USC00519523', '2017-08-15', 0.06, 79.0),\n",
       " (14956, 'USC00519281', '2017-08-15', 0.32, 77.0),\n",
       " (19542, 'USC00516128', '2017-08-15', 0.42, 70.0),\n",
       " (2717, 'USC00519397', '2017-08-14', 0.0, 79.0),\n",
       " (7627, 'USC00514830', '2017-08-14', 0.01, 81.0),\n",
       " (12180, 'USC00519523', '2017-08-14', 0.08, 75.0),\n",
       " (14955, 'USC00519281', '2017-08-14', 0.0, 77.0),\n",
       " (19541, 'USC00516128', '2017-08-14', 0.22, 79.0),\n",
       " (2716, 'USC00519397', '2017-08-13', 0.0, 81.0),\n",
       " (7626, 'USC00514830', '2017-08-13', None, 81.0),\n",
       " (12179, 'USC00519523', '2017-08-13', 0.0, 84.0),\n",
       " (14954, 'USC00519281', '2017-08-13', 0.0, 77.0),\n",
       " (19540, 'USC00516128', '2017-08-13', None, 80.0),\n",
       " (2715, 'USC00519397', '2017-08-12', 0.0, 80.0),\n",
       " (12178, 'USC00519523', '2017-08-12', 0.0, 83.0),\n",
       " (19539, 'USC00516128', '2017-08-12', 0.14, 74.0),\n",
       " (2714, 'USC00519397', '2017-08-11', 0.0, 78.0),\n",
       " (7625, 'USC00514830', '2017-08-11', 0.0, 81.0),\n",
       " (12177, 'USC00519523', '2017-08-11', 0.0, 81.0),\n",
       " (19538, 'USC00516128', '2017-08-11', None, 72.0),\n",
       " (2713, 'USC00519397', '2017-08-10', 0.0, 81.0),\n",
       " (7624, 'USC00514830', '2017-08-10', 0.0, 81.0),\n",
       " (12176, 'USC00519523', '2017-08-10', 0.0, 80.0),\n",
       " (19537, 'USC00516128', '2017-08-10', 0.07, 75.0),\n",
       " (2712, 'USC00519397', '2017-08-09', 0.0, 80.0),\n",
       " (7623, 'USC00514830', '2017-08-09', 0.0, 81.0),\n",
       " (19536, 'USC00516128', '2017-08-09', 0.15, 71.0),\n",
       " (2711, 'USC00519397', '2017-08-08', 0.0, 80.0),\n",
       " (7622, 'USC00514830', '2017-08-08', 0.1, 78.0),\n",
       " (12175, 'USC00519523', '2017-08-08', 0.0, 82.0),\n",
       " (19535, 'USC00516128', '2017-08-08', 0.34, 74.0),\n",
       " (2710, 'USC00519397', '2017-08-07', 0.0, 80.0),\n",
       " (7621, 'USC00514830', '2017-08-07', 0.0, 81.0),\n",
       " (12174, 'USC00519523', '2017-08-07', 0.0, 83.0),\n",
       " (19534, 'USC00516128', '2017-08-07', 0.05, 78.0),\n",
       " (2709, 'USC00519397', '2017-08-06', 0.0, 80.0),\n",
       " (7620, 'USC00514830', '2017-08-06', 0.0, 82.0),\n",
       " (12173, 'USC00519523', '2017-08-06', 0.0, 83.0),\n",
       " (14953, 'USC00519281', '2017-08-06', 0.0, 83.0),\n",
       " (19533, 'USC00516128', '2017-08-06', None, 79.0),\n",
       " (2708, 'USC00519397', '2017-08-05', 0.0, 81.0),\n",
       " (14952, 'USC00519281', '2017-08-05', 0.06, 82.0),\n",
       " (19532, 'USC00516128', '2017-08-05', None, 77.0),\n",
       " (2707, 'USC00519397', '2017-08-04', 0.02, 80.0),\n",
       " (7619, 'USC00514830', '2017-08-04', 0.04, 81.0),\n",
       " (12172, 'USC00519523', '2017-08-04', 0.0, 82.0),\n",
       " (14951, 'USC00519281', '2017-08-04', 0.0, 77.0),\n",
       " (2706, 'USC00519397', '2017-08-03', 0.0, 79.0),\n",
       " (7618, 'USC00514830', '2017-08-03', 0.01, 81.0),\n",
       " (12171, 'USC00519523', '2017-08-03', 0.0, 80.0),\n",
       " (19531, 'USC00516128', '2017-08-03', 0.06, 76.0),\n",
       " (2705, 'USC00519397', '2017-08-02', 0.0, 73.0),\n",
       " (7617, 'USC00514830', '2017-08-02', 0.05, 80.0),\n",
       " (12170, 'USC00519523', '2017-08-02', 0.0, 83.0),\n",
       " (19530, 'USC00516128', '2017-08-02', 0.25, 80.0),\n",
       " (2704, 'USC00519397', '2017-08-01', 0.02, 77.0),\n",
       " (7616, 'USC00514830', '2017-08-01', 0.12, 74.0),\n",
       " (12169, 'USC00519523', '2017-08-01', 0.0, 75.0),\n",
       " (19529, 'USC00516128', '2017-08-01', None, 72.0),\n",
       " (2703, 'USC00519397', '2017-07-31', 0.0, 80.0),\n",
       " (5433, 'USC00513117', '2017-07-31', 0.0, 77.0),\n",
       " (7615, 'USC00514830', '2017-07-31', None, 81.0),\n",
       " (9007, 'USC00517948', '2017-07-31', None, 81.0),\n",
       " (12168, 'USC00519523', '2017-07-31', 0.0, 82.0),\n",
       " (14950, 'USC00519281', '2017-07-31', 0.0, 76.0),\n",
       " (19528, 'USC00516128', '2017-07-31', 0.0, 74.0),\n",
       " (2702, 'USC00519397', '2017-07-30', 0.0, 81.0),\n",
       " (5432, 'USC00513117', '2017-07-30', 0.0, 78.0),\n",
       " (12167, 'USC00519523', '2017-07-30', 0.0, 84.0),\n",
       " (14949, 'USC00519281', '2017-07-30', 0.0, 81.0),\n",
       " (19527, 'USC00516128', '2017-07-30', 0.3, 79.0),\n",
       " (2701, 'USC00519397', '2017-07-29', 0.0, 81.0),\n",
       " (5431, 'USC00513117', '2017-07-29', 0.06, 78.0),\n",
       " (7614, 'USC00514830', '2017-07-29', 0.02, 82.0),\n",
       " (12166, 'USC00519523', '2017-07-29', 0.0, 83.0),\n",
       " (14948, 'USC00519281', '2017-07-29', 0.23, 82.0),\n",
       " (19526, 'USC00516128', '2017-07-29', 0.3, 77.0),\n",
       " (2700, 'USC00519397', '2017-07-28', 0.0, 81.0),\n",
       " (5430, 'USC00513117', '2017-07-28', 0.13, 77.0),\n",
       " (7613, 'USC00514830', '2017-07-28', 0.14, 81.0),\n",
       " (9006, 'USC00517948', '2017-07-28', 0.01, 80.0),\n",
       " (12165, 'USC00519523', '2017-07-28', 0.0, 81.0),\n",
       " (14947, 'USC00519281', '2017-07-28', 0.09, 81.0),\n",
       " (19525, 'USC00516128', '2017-07-28', 0.4, 73.0),\n",
       " (2699, 'USC00519397', '2017-07-27', 0.0, 79.0),\n",
       " (5429, 'USC00513117', '2017-07-27', 0.0, 77.0),\n",
       " (7612, 'USC00514830', '2017-07-27', 0.0, 80.0),\n",
       " (9005, 'USC00517948', '2017-07-27', None, 79.0),\n",
       " (12164, 'USC00519523', '2017-07-27', 0.0, 80.0),\n",
       " (14946, 'USC00519281', '2017-07-27', 0.01, 76.0),\n",
       " (19524, 'USC00516128', '2017-07-27', 0.0, 75.0),\n",
       " (2698, 'USC00519397', '2017-07-26', 0.0, 82.0),\n",
       " (5428, 'USC00513117', '2017-07-26', 0.06, 78.0),\n",
       " (7611, 'USC00514830', '2017-07-26', 0.02, 79.0),\n",
       " (9004, 'USC00517948', '2017-07-26', None, 78.0),\n",
       " (12163, 'USC00519523', '2017-07-26', 0.0, 84.0),\n",
       " (14945, 'USC00519281', '2017-07-26', 0.12, 75.0),\n",
       " (19523, 'USC00516128', '2017-07-26', 0.3, 73.0),\n",
       " (2697, 'USC00519397', '2017-07-25', 0.0, 80.0),\n",
       " (5427, 'USC00513117', '2017-07-25', 0.03, 78.0),\n",
       " (7610, 'USC00514830', '2017-07-25', 0.12, 80.0),\n",
       " (9003, 'USC00517948', '2017-07-25', 0.0, 81.0),\n",
       " (12162, 'USC00519523', '2017-07-25', 0.05, 80.0),\n",
       " (14944, 'USC00519281', '2017-07-25', 0.11, 77.0),\n",
       " (19522, 'USC00516128', '2017-07-25', 0.3, 79.0),\n",
       " (2696, 'USC00519397', '2017-07-24', 0.05, 78.0),\n",
       " (5426, 'USC00513117', '2017-07-24', 0.58, 78.0),\n",
       " (7609, 'USC00514830', '2017-07-24', 1.19, 79.0),\n",
       " (12161, 'USC00519523', '2017-07-24', None, 79.0),\n",
       " (14943, 'USC00519281', '2017-07-24', 0.61, 75.0),\n",
       " (19521, 'USC00516128', '2017-07-24', 0.84, 77.0),\n",
       " (2695, 'USC00519397', '2017-07-23', 0.0, 81.0),\n",
       " (5425, 'USC00513117', '2017-07-23', 0.06, 75.0),\n",
       " (7608, 'USC00514830', '2017-07-23', 0.07, 82.0),\n",
       " (14942, 'USC00519281', '2017-07-23', 0.2, 82.0),\n",
       " (19520, 'USC00516128', '2017-07-23', 0.8, 78.0),\n",
       " (2694, 'USC00519397', '2017-07-22', 0.03, 81.0),\n",
       " (5424, 'USC00513117', '2017-07-22', 0.07, 78.0),\n",
       " (7607, 'USC00514830', '2017-07-22', 0.12, 80.0),\n",
       " (12160, 'USC00519523', '2017-07-22', 0.0, 78.0),\n",
       " (14941, 'USC00519281', '2017-07-22', 0.2, 77.0),\n",
       " (19519, 'USC00516128', '2017-07-22', 4.0, 72.0),\n",
       " (2693, 'USC00519397', '2017-07-21', 0.0, 80.0),\n",
       " (5423, 'USC00513117', '2017-07-21', 0.0, 78.0),\n",
       " (7606, 'USC00514830', '2017-07-21', 0.0, 79.0),\n",
       " (9002, 'USC00517948', '2017-07-21', 0.0, 81.0),\n",
       " (12159, 'USC00519523', '2017-07-21', 0.0, 80.0),\n",
       " (14940, 'USC00519281', '2017-07-21', 0.03, 77.0),\n",
       " (19518, 'USC00516128', '2017-07-21', 0.1, 72.0),\n",
       " (2692, 'USC00519397', '2017-07-20', 0.03, 80.0),\n",
       " (5422, 'USC00513117', '2017-07-20', 0.12, 78.0),\n",
       " (7605, 'USC00514830', '2017-07-20', 0.0, 79.0),\n",
       " (9001, 'USC00517948', '2017-07-20', 0.0, 80.0),\n",
       " (12158, 'USC00519523', '2017-07-20', 0.33, 80.0),\n",
       " (14939, 'USC00519281', '2017-07-20', 0.06, 77.0),\n",
       " (19517, 'USC00516128', '2017-07-20', 0.7, 75.0),\n",
       " (5421, 'USC00513117', '2017-07-19', 0.0, 78.0),\n",
       " (7604, 'USC00514830', '2017-07-19', 0.09, 80.0),\n",
       " (9000, 'USC00517948', '2017-07-19', 0.0, 81.0),\n",
       " (12157, 'USC00519523', '2017-07-19', 0.0, 80.0),\n",
       " (14938, 'USC00519281', '2017-07-19', 0.05, 76.0),\n",
       " (19516, 'USC00516128', '2017-07-19', 0.27, 74.0),\n",
       " (2691, 'USC00519397', '2017-07-18', 0.05, 80.0),\n",
       " (5420, 'USC00513117', '2017-07-18', 0.03, 78.0),\n",
       " (7603, 'USC00514830', '2017-07-18', 0.0, 82.0),\n",
       " (8999, 'USC00517948', '2017-07-18', 0.0, 78.0),\n",
       " (12156, 'USC00519523', '2017-07-18', 0.0, 83.0),\n",
       " (14937, 'USC00519281', '2017-07-18', 0.05, 76.0),\n",
       " (19515, 'USC00516128', '2017-07-18', 2.4, 77.0),\n",
       " (2690, 'USC00519397', '2017-07-17', 0.03, 80.0),\n",
       " (5419, 'USC00513117', '2017-07-17', 0.12, 75.0),\n",
       " (7602, 'USC00514830', '2017-07-17', 0.16, 82.0),\n",
       " (12155, 'USC00519523', '2017-07-17', 0.0, 82.0),\n",
       " (14936, 'USC00519281', '2017-07-17', 0.21, 76.0),\n",
       " (19514, 'USC00516128', '2017-07-17', 0.39, 72.0),\n",
       " (2689, 'USC00519397', '2017-07-16', 0.02, 78.0),\n",
       " (5418, 'USC00513117', '2017-07-16', 0.07, 76.0),\n",
       " (7601, 'USC00514830', '2017-07-16', 0.12, 79.0),\n",
       " (12154, 'USC00519523', '2017-07-16', 0.0, 82.0),\n",
       " (14935, 'USC00519281', '2017-07-16', 0.1, 80.0),\n",
       " (19513, 'USC00516128', '2017-07-16', 0.5, 75.0),\n",
       " (2688, 'USC00519397', '2017-07-15', 0.0, 80.0),\n",
       " (5417, 'USC00513117', '2017-07-15', 0.03, 79.0),\n",
       " (7600, 'USC00514830', '2017-07-15', 0.01, 82.0),\n",
       " (12153, 'USC00519523', '2017-07-15', 0.0, 82.0),\n",
       " (14934, 'USC00519281', '2017-07-15', 0.05, 80.0),\n",
       " (19512, 'USC00516128', '2017-07-15', 0.1, 78.0),\n",
       " (2687, 'USC00519397', '2017-07-14', 0.02, 81.0),\n",
       " (5416, 'USC00513117', '2017-07-14', 0.05, 80.0),\n",
       " (7599, 'USC00514830', '2017-07-14', 0.0, 80.0),\n",
       " (12152, 'USC00519523', '2017-07-14', 0.0, 80.0),\n",
       " (14933, 'USC00519281', '2017-07-14', 0.2, 76.0),\n",
       " (19511, 'USC00516128', '2017-07-14', 0.68, 76.0),\n",
       " (2686, 'USC00519397', '2017-07-13', 0.07, 79.0),\n",
       " (5415, 'USC00513117', '2017-07-13', 0.33, 76.0),\n",
       " (7598, 'USC00514830', '2017-07-13', 0.3, 81.0),\n",
       " (8998, 'USC00517948', '2017-07-13', None, 81.0),\n",
       " (12151, 'USC00519523', '2017-07-13', 0.11, 79.0),\n",
       " (14932, 'USC00519281', '2017-07-13', 0.32, 74.0),\n",
       " (19510, 'USC00516128', '2017-07-13', 0.68, 77.0),\n",
       " (2685, 'USC00519397', '2017-07-12', 0.0, 81.0),\n",
       " (5414, 'USC00513117', '2017-07-12', 0.01, 78.0),\n",
       " (7597, 'USC00514830', '2017-07-12', 0.02, 81.0),\n",
       " (8997, 'USC00517948', '2017-07-12', None, 80.0),\n",
       " (12150, 'USC00519523', '2017-07-12', 0.0, 82.0),\n",
       " (14931, 'USC00519281', '2017-07-12', 0.28, 74.0),\n",
       " (19509, 'USC00516128', '2017-07-12', 0.05, 72.0),\n",
       " (2684, 'USC00519397', '2017-07-11', 0.0, 78.0),\n",
       " (5413, 'USC00513117', '2017-07-11', 0.01, 76.0),\n",
       " (7596, 'USC00514830', '2017-07-11', 0.0, 79.0),\n",
       " (8996, 'USC00517948', '2017-07-11', None, 81.0),\n",
       " (12149, 'USC00519523', '2017-07-11', 0.0, 79.0),\n",
       " (14930, 'USC00519281', '2017-07-11', 0.02, 72.0),\n",
       " (19508, 'USC00516128', '2017-07-11', 0.0, 74.0),\n",
       " (2683, 'USC00519397', '2017-07-10', 0.0, 80.0),\n",
       " (5412, 'USC00513117', '2017-07-10', 0.0, 79.0),\n",
       " (7595, 'USC00514830', '2017-07-10', 0.0, 80.0),\n",
       " (8995, 'USC00517948', '2017-07-10', None, 78.0),\n",
       " (12148, 'USC00519523', '2017-07-10', 0.0, 82.0),\n",
       " (14929, 'USC00519281', '2017-07-10', 0.02, 69.0),\n",
       " (19507, 'USC00516128', '2017-07-10', 0.02, 77.0),\n",
       " (2682, 'USC00519397', '2017-07-09', 0.0, 80.0),\n",
       " (5411, 'USC00513117', '2017-07-09', 0.09, 76.0),\n",
       " (7594, 'USC00514830', '2017-07-09', 0.0, 82.0),\n",
       " (12147, 'USC00519523', '2017-07-09', 0.0, 82.0),\n",
       " (14928, 'USC00519281', '2017-07-09', 0.11, 78.0),\n",
       " (19506, 'USC00516128', '2017-07-09', 0.0, 78.0),\n",
       " (2681, 'USC00519397', '2017-07-08', 0.0, 80.0),\n",
       " (5410, 'USC00513117', '2017-07-08', 0.02, 76.0),\n",
       " (7593, 'USC00514830', '2017-07-08', 0.06, 81.0),\n",
       " (12146, 'USC00519523', '2017-07-08', 0.0, 77.0),\n",
       " (14927, 'USC00519281', '2017-07-08', 0.0, 78.0),\n",
       " (19505, 'USC00516128', '2017-07-08', 0.02, 71.0),\n",
       " (2680, 'USC00519397', '2017-07-07', 0.0, 79.0),\n",
       " (5409, 'USC00513117', '2017-07-07', 0.02, 77.0),\n",
       " (7592, 'USC00514830', '2017-07-07', None, 77.0),\n",
       " (8994, 'USC00517948', '2017-07-07', None, 79.0),\n",
       " (12145, 'USC00519523', '2017-07-07', 0.0, 79.0),\n",
       " (14926, 'USC00519281', '2017-07-07', 0.18, 75.0),\n",
       " (19504, 'USC00516128', '2017-07-07', 0.3, 74.0),\n",
       " (2679, 'USC00519397', '2017-07-06', 0.0, 81.0),\n",
       " (5408, 'USC00513117', '2017-07-06', 0.0, 76.0),\n",
       " (8993, 'USC00517948', '2017-07-06', None, 79.0),\n",
       " (12144, 'USC00519523', '2017-07-06', 0.0, 79.0),\n",
       " (14925, 'USC00519281', '2017-07-06', 0.0, 74.0),\n",
       " (19503, 'USC00516128', '2017-07-06', 0.02, 74.0),\n",
       " (2678, 'USC00519397', '2017-07-05', 0.0, 80.0),\n",
       " (5407, 'USC00513117', '2017-07-05', 0.0, 77.0),\n",
       " (7591, 'USC00514830', '2017-07-05', None, 81.0),\n",
       " (8992, 'USC00517948', '2017-07-05', None, 80.0),\n",
       " (12143, 'USC00519523', '2017-07-05', None, 80.0),\n",
       " (14924, 'USC00519281', '2017-07-05', 0.0, 77.0),\n",
       " (19502, 'USC00516128', '2017-07-05', 0.0, 75.0),\n",
       " (2677, 'USC00519397', '2017-07-04', 0.04, 80.0),\n",
       " (5406, 'USC00513117', '2017-07-04', 0.03, 77.0),\n",
       " (14923, 'USC00519281', '2017-07-04', 0.08, 78.0),\n",
       " (19501, 'USC00516128', '2017-07-04', 0.0, 77.0),\n",
       " (2676, 'USC00519397', '2017-07-03', 0.04, 78.0),\n",
       " (5405, 'USC00513117', '2017-07-03', 0.13, 77.0),\n",
       " (7590, 'USC00514830', '2017-07-03', None, 81.0),\n",
       " (8991, 'USC00517948', '2017-07-03', None, 87.0),\n",
       " (12142, 'USC00519523', '2017-07-03', 0.02, 81.0),\n",
       " (14922, 'USC00519281', '2017-07-03', 0.15, 76.0),\n",
       " (19500, 'USC00516128', '2017-07-03', 0.4, 77.0),\n",
       " (2675, 'USC00519397', '2017-07-02', 0.02, 80.0),\n",
       " (5404, 'USC00513117', '2017-07-02', 0.05, 77.0),\n",
       " (12141, 'USC00519523', '2017-07-02', None, 80.0),\n",
       " (14921, 'USC00519281', '2017-07-02', 0.15, 81.0),\n",
       " (19499, 'USC00516128', '2017-07-02', 0.5, 78.0),\n",
       " (2674, 'USC00519397', '2017-07-01', 0.02, 80.0),\n",
       " (5403, 'USC00513117', '2017-07-01', 0.06, 76.0),\n",
       " (14920, 'USC00519281', '2017-07-01', 0.08, 79.0),\n",
       " (19498, 'USC00516128', '2017-07-01', 0.1, 74.0),\n",
       " (2673, 'USC00519397', '2017-06-30', 0.08, 75.0),\n",
       " (5402, 'USC00513117', '2017-06-30', 0.04, 74.0),\n",
       " (7589, 'USC00514830', '2017-06-30', 0.0, 81.0),\n",
       " (8990, 'USC00517948', '2017-06-30', 0.12, 74.0),\n",
       " (12140, 'USC00519523', '2017-06-30', 0.07, 75.0),\n",
       " (14919, 'USC00519281', '2017-06-30', 0.01, 76.0),\n",
       " (19497, 'USC00516128', '2017-06-30', 0.2, 75.0),\n",
       " (2672, 'USC00519397', '2017-06-29', 0.0, 79.0),\n",
       " (5401, 'USC00513117', '2017-06-29', 0.03, 76.0),\n",
       " (7588, 'USC00514830', '2017-06-29', None, 76.0),\n",
       " (8989, 'USC00517948', '2017-06-29', 0.0, 79.0),\n",
       " (12139, 'USC00519523', '2017-06-29', 0.0, 78.0),\n",
       " (14918, 'USC00519281', '2017-06-29', 0.0, 76.0),\n",
       " (19496, 'USC00516128', '2017-06-29', 0.04, 76.0),\n",
       " (2671, 'USC00519397', '2017-06-28', 0.0, 79.0),\n",
       " (5400, 'USC00513117', '2017-06-28', 0.01, 77.0),\n",
       " (8988, 'USC00517948', '2017-06-28', 0.0, 80.0),\n",
       " (12138, 'USC00519523', '2017-06-28', 0.0, 79.0),\n",
       " (14917, 'USC00519281', '2017-06-28', 0.0, 77.0),\n",
       " (19495, 'USC00516128', '2017-06-28', 0.02, 74.0),\n",
       " (2670, 'USC00519397', '2017-06-27', 0.0, 80.0),\n",
       " (5399, 'USC00513117', '2017-06-27', 0.0, 77.0),\n",
       " (8987, 'USC00517948', '2017-06-27', 0.0, 80.0),\n",
       " (12137, 'USC00519523', '2017-06-27', 0.0, 81.0),\n",
       " (14916, 'USC00519281', '2017-06-27', 0.01, 76.0),\n",
       " (19494, 'USC00516128', '2017-06-27', 0.1, 74.0),\n",
       " (2669, 'USC00519397', '2017-06-26', 0.0, 81.0),\n",
       " (5398, 'USC00513117', '2017-06-26', 0.02, 77.0),\n",
       " (7587, 'USC00514830', '2017-06-26', None, 80.0),\n",
       " (8986, 'USC00517948', '2017-06-26', None, 82.0),\n",
       " (12136, 'USC00519523', '2017-06-26', 0.0, 81.0),\n",
       " (14915, 'USC00519281', '2017-06-26', 0.06, 73.0),\n",
       " (19493, 'USC00516128', '2017-06-26', 0.02, 79.0),\n",
       " (2668, 'USC00519397', '2017-06-25', 0.0, 80.0),\n",
       " (5397, 'USC00513117', '2017-06-25', 0.08, 73.0),\n",
       " (12135, 'USC00519523', '2017-06-25', 0.0, 80.0),\n",
       " (14914, 'USC00519281', '2017-06-25', 0.02, 71.0),\n",
       " (19492, 'USC00516128', '2017-06-25', 0.5, 79.0),\n",
       " (2667, 'USC00519397', '2017-06-24', 0.06, 80.0),\n",
       " (5396, 'USC00513117', '2017-06-24', 0.0, 74.0),\n",
       " (12134, 'USC00519523', '2017-06-24', 0.0, 82.0),\n",
       " (14913, 'USC00519281', '2017-06-24', 0.36, 77.0),\n",
       " (19491, 'USC00516128', '2017-06-24', 0.22, 73.0),\n",
       " (2666, 'USC00519397', '2017-06-23', 0.0, 78.0),\n",
       " (5395, 'USC00513117', '2017-06-23', 0.0, 76.0),\n",
       " (7586, 'USC00514830', '2017-06-23', None, 76.0),\n",
       " (8985, 'USC00517948', '2017-06-23', 0.0, 76.0),\n",
       " (12133, 'USC00519523', '2017-06-23', 0.05, 79.0),\n",
       " (14912, 'USC00519281', '2017-06-23', 0.12, 72.0),\n",
       " (19490, 'USC00516128', '2017-06-23', 0.5, 71.0),\n",
       " (2665, 'USC00519397', '2017-06-22', 0.0, 80.0),\n",
       " (5394, 'USC00513117', '2017-06-22', 0.1, 77.0),\n",
       " (8984, 'USC00517948', '2017-06-22', 0.0, 81.0),\n",
       " (12132, 'USC00519523', '2017-06-22', 0.0, 80.0),\n",
       " (14911, 'USC00519281', '2017-06-22', 0.06, 72.0),\n",
       " (19489, 'USC00516128', '2017-06-22', 0.28, 76.0),\n",
       " (2664, 'USC00519397', '2017-06-21', 0.0, 79.0),\n",
       " (5393, 'USC00513117', '2017-06-21', 0.02, 82.0),\n",
       " (8983, 'USC00517948', '2017-06-21', None, 76.0),\n",
       " (12131, 'USC00519523', '2017-06-21', None, 80.0),\n",
       " (14910, 'USC00519281', '2017-06-21', 0.19, 74.0),\n",
       " (19488, 'USC00516128', '2017-06-21', 0.3, 75.0),\n",
       " (2663, 'USC00519397', '2017-06-20', 0.02, 78.0),\n",
       " (5392, 'USC00513117', '2017-06-20', 0.05, 75.0),\n",
       " (7585, 'USC00514830', '2017-06-20', 0.17, 79.0),\n",
       " (8982, 'USC00517948', '2017-06-20', None, 77.0),\n",
       " (14909, 'USC00519281', '2017-06-20', 0.0, 72.0),\n",
       " (19487, 'USC00516128', '2017-06-20', 0.31, 74.0),\n",
       " (2662, 'USC00519397', '2017-06-19', 0.0, 80.0),\n",
       " (5391, 'USC00513117', '2017-06-19', 0.05, 77.0),\n",
       " (7584, 'USC00514830', '2017-06-19', 0.19, 78.0),\n",
       " (8981, 'USC00517948', '2017-06-19', None, 78.0),\n",
       " (12130, 'USC00519523', '2017-06-19', 0.01, 78.0),\n",
       " (14908, 'USC00519281', '2017-06-19', 0.08, 72.0),\n",
       " (19486, 'USC00516128', '2017-06-19', 0.4, 76.0),\n",
       " (2661, 'USC00519397', '2017-06-18', 0.05, 77.0),\n",
       " (5390, 'USC00513117', '2017-06-18', 0.25, 72.0),\n",
       " (7583, 'USC00514830', '2017-06-18', 0.18, 77.0),\n",
       " (12129, 'USC00519523', '2017-06-18', 0.0, 78.0),\n",
       " (14907, 'USC00519281', '2017-06-18', 0.24, 75.0),\n",
       " (19485, 'USC00516128', '2017-06-18', 0.7, 77.0),\n",
       " (2660, 'USC00519397', '2017-06-17', 0.0, 80.0),\n",
       " (5389, 'USC00513117', '2017-06-17', 0.35, 77.0),\n",
       " (7582, 'USC00514830', '2017-06-17', 0.02, 78.0),\n",
       " (12128, 'USC00519523', '2017-06-17', 0.0, 77.0),\n",
       " (14906, 'USC00519281', '2017-06-17', 0.07, 79.0),\n",
       " (19484, 'USC00516128', '2017-06-17', 0.1, 72.0),\n",
       " (2659, 'USC00519397', '2017-06-16', 0.0, 79.0),\n",
       " (5388, 'USC00513117', '2017-06-16', 0.02, 76.0),\n",
       " (7581, 'USC00514830', '2017-06-16', 0.02, 80.0),\n",
       " (8980, 'USC00517948', '2017-06-16', None, 78.0),\n",
       " (12127, 'USC00519523', '2017-06-16', 0.0, 80.0),\n",
       " (14905, 'USC00519281', '2017-06-16', 0.06, 73.0),\n",
       " (19483, 'USC00516128', '2017-06-16', 0.1, 74.0),\n",
       " (2658, 'USC00519397', '2017-06-15', 0.0, 78.0),\n",
       " (5387, 'USC00513117', '2017-06-15', 0.17, 77.0),\n",
       " (7580, 'USC00514830', '2017-06-15', 0.3, 78.0),\n",
       " (8979, 'USC00517948', '2017-06-15', None, 77.0),\n",
       " (12126, 'USC00519523', '2017-06-15', 0.0, 78.0),\n",
       " (14904, 'USC00519281', '2017-06-15', 0.55, 75.0),\n",
       " (19482, 'USC00516128', '2017-06-15', 1.69, 77.0),\n",
       " (2657, 'USC00519397', '2017-06-14', 0.0, 80.0),\n",
       " (5386, 'USC00513117', '2017-06-14', 0.27, 76.0),\n",
       " (7579, 'USC00514830', '2017-06-14', 0.21, 79.0),\n",
       " (8978, 'USC00517948', '2017-06-14', None, 78.0),\n",
       " (12125, 'USC00519523', '2017-06-14', 0.06, 80.0),\n",
       " (14903, 'USC00519281', '2017-06-14', 0.22, 74.0),\n",
       " (19481, 'USC00516128', '2017-06-14', 0.81, 74.0),\n",
       " (2656, 'USC00519397', '2017-06-13', 0.0, 80.0),\n",
       " (5385, 'USC00513117', '2017-06-13', 0.36, 76.0),\n",
       " (7578, 'USC00514830', '2017-06-13', 0.1, 75.0),\n",
       " (8977, 'USC00517948', '2017-06-13', None, 81.0),\n",
       " (12124, 'USC00519523', '2017-06-13', 0.03, 77.0),\n",
       " (14902, 'USC00519281', '2017-06-13', 0.24, 76.0),\n",
       " (19480, 'USC00516128', '2017-06-13', 0.65, 73.0),\n",
       " (2655, 'USC00519397', '2017-06-12', 0.02, 83.0),\n",
       " (5384, 'USC00513117', '2017-06-12', 0.19, 76.0),\n",
       " (7577, 'USC00514830', '2017-06-12', 0.35, 79.0),\n",
       " (12123, 'USC00519523', '2017-06-12', 0.14, 80.0),\n",
       " (14901, 'USC00519281', '2017-06-12', 0.24, 74.0),\n",
       " (19479, 'USC00516128', '2017-06-12', 0.81, 74.0),\n",
       " (2654, 'USC00519397', '2017-06-11', 0.08, 79.0),\n",
       " (5383, 'USC00513117', '2017-06-11', 0.24, 73.0),\n",
       " (7576, 'USC00514830', '2017-06-11', 0.14, 79.0),\n",
       " (12122, 'USC00519523', '2017-06-11', 0.25, 81.0),\n",
       " (14900, 'USC00519281', '2017-06-11', 0.74, 74.0),\n",
       " (19478, 'USC00516128', '2017-06-11', 0.7, 76.0),\n",
       " (2653, 'USC00519397', '2017-06-10', 0.04, 77.0),\n",
       " (5382, 'USC00513117', '2017-06-10', 0.21, 75.0),\n",
       " (7575, 'USC00514830', '2017-06-10', 0.53, 78.0),\n",
       " (12121, 'USC00519523', '2017-06-10', 0.13, 75.0),\n",
       " (14899, 'USC00519281', '2017-06-10', 0.62, 74.0),\n",
       " (19477, 'USC00516128', '2017-06-10', None, 72.0),\n",
       " (2652, 'USC00519397', '2017-06-09', 0.0, 80.0),\n",
       " (5381, 'USC00513117', '2017-06-09', 0.02, 78.0),\n",
       " (7574, 'USC00514830', '2017-06-09', 0.0, 81.0),\n",
       " (8976, 'USC00517948', '2017-06-09', None, 80.0),\n",
       " (12120, 'USC00519523', '2017-06-09', 0.0, 78.0),\n",
       " (14898, 'USC00519281', '2017-06-09', 0.02, 72.0),\n",
       " (2651, 'USC00519397', '2017-06-08', 0.0, 80.0),\n",
       " (5380, 'USC00513117', '2017-06-08', 0.02, 76.0),\n",
       " (7573, 'USC00514830', '2017-06-08', 0.01, 79.0),\n",
       " (8975, 'USC00517948', '2017-06-08', None, 78.0),\n",
       " (12119, 'USC00519523', '2017-06-08', 0.0, 77.0),\n",
       " (14897, 'USC00519281', '2017-06-08', 0.0, 75.0),\n",
       " (19476, 'USC00516128', '2017-06-08', 0.0, 75.0),\n",
       " (2650, 'USC00519397', '2017-06-07', 0.0, 79.0),\n",
       " (5379, 'USC00513117', '2017-06-07', 0.0, 75.0),\n",
       " (7572, 'USC00514830', '2017-06-07', 0.0, 81.0),\n",
       " (8974, 'USC00517948', '2017-06-07', None, 80.0),\n",
       " (12118, 'USC00519523', '2017-06-07', 0.0, 78.0),\n",
       " (14896, 'USC00519281', '2017-06-07', 0.0, 75.0),\n",
       " (19475, 'USC00516128', '2017-06-07', 0.01, 79.0),\n",
       " (2649, 'USC00519397', '2017-06-06', 0.0, 79.0),\n",
       " (5378, 'USC00513117', '2017-06-06', 0.0, 75.0),\n",
       " (7571, 'USC00514830', '2017-06-06', 0.0, 80.0),\n",
       " (8973, 'USC00517948', '2017-06-06', None, 80.0),\n",
       " (12117, 'USC00519523', '2017-06-06', 0.0, 78.0),\n",
       " (14895, 'USC00519281', '2017-06-06', 0.0, 75.0),\n",
       " (19474, 'USC00516128', '2017-06-06', 0.0, 74.0),\n",
       " (2648, 'USC00519397', '2017-06-05', 0.0, 80.0),\n",
       " (5377, 'USC00513117', '2017-06-05', 0.0, 76.0),\n",
       " (7570, 'USC00514830', '2017-06-05', 0.02, 81.0),\n",
       " (8972, 'USC00517948', '2017-06-05', None, 78.0),\n",
       " (12116, 'USC00519523', '2017-06-05', 0.0, 78.0),\n",
       " (14894, 'USC00519281', '2017-06-05', 0.05, 75.0),\n",
       " (19473, 'USC00516128', '2017-06-05', 0.01, 74.0),\n",
       " (2647, 'USC00519397', '2017-06-04', 0.0, 79.0),\n",
       " (5376, 'USC00513117', '2017-06-04', 0.15, 78.0),\n",
       " (7569, 'USC00514830', '2017-06-04', 0.05, 79.0),\n",
       " (12115, 'USC00519523', '2017-06-04', 0.0, 81.0),\n",
       " (14893, 'USC00519281', '2017-06-04', 0.13, 77.0),\n",
       " (19472, 'USC00516128', '2017-06-04', 0.82, 77.0),\n",
       " (2646, 'USC00519397', '2017-06-03', 0.02, 79.0),\n",
       " (5375, 'USC00513117', '2017-06-03', 0.2, 76.0),\n",
       " (7568, 'USC00514830', '2017-06-03', 0.16, 80.0),\n",
       " (12114, 'USC00519523', '2017-06-03', 0.15, 79.0),\n",
       " (14892, 'USC00519281', '2017-06-03', 0.08, 76.0),\n",
       " (19471, 'USC00516128', '2017-06-03', None, 74.0),\n",
       " (2645, 'USC00519397', '2017-06-02', 0.0, 79.0),\n",
       " (5374, 'USC00513117', '2017-06-02', 0.1, 76.0),\n",
       " (7567, 'USC00514830', '2017-06-02', 0.15, 78.0),\n",
       " (8971, 'USC00517948', '2017-06-02', None, 79.0),\n",
       " (12113, 'USC00519523', '2017-06-02', 0.0, 81.0),\n",
       " (14891, 'USC00519281', '2017-06-02', 0.09, 76.0),\n",
       " (2644, 'USC00519397', '2017-06-01', 0.0, 79.0),\n",
       " (5373, 'USC00513117', '2017-06-01', 0.03, 76.0),\n",
       " (7566, 'USC00514830', '2017-06-01', 0.0, 81.0),\n",
       " (12112, 'USC00519523', '2017-06-01', 0.0, 79.0),\n",
       " (14890, 'USC00519281', '2017-06-01', 0.0, 80.0),\n",
       " (19470, 'USC00516128', '2017-06-01', 0.01, 74.0),\n",
       " (2643, 'USC00519397', '2017-05-31', 0.02, 79.0),\n",
       " (5372, 'USC00513117', '2017-05-31', 0.1, 76.0),\n",
       " (7565, 'USC00514830', '2017-05-31', 0.0, 81.0),\n",
       " (12111, 'USC00519523', '2017-05-31', 0.0, 79.0),\n",
       " (14889, 'USC00519281', '2017-05-31', 0.25, 75.0),\n",
       " (2642, 'USC00519397', '2017-05-30', 0.26, 76.0),\n",
       " (5371, 'USC00513117', '2017-05-30', 0.2, 74.0),\n",
       " (7564, 'USC00514830', '2017-05-30', 0.04, 81.0),\n",
       " (12110, 'USC00519523', '2017-05-30', 0.11, 78.0),\n",
       " (14888, 'USC00519281', '2017-05-30', 1.12, 72.0),\n",
       " (19469, 'USC00516128', '2017-05-30', None, 72.0),\n",
       " (2641, 'USC00519397', '2017-05-29', 0.0, 75.0),\n",
       " (5370, 'USC00513117', '2017-05-29', 0.02, 71.0),\n",
       " (7563, 'USC00514830', '2017-05-29', 0.0, 79.0),\n",
       " (12109, 'USC00519523', '2017-05-29', 0.0, 80.0),\n",
       " (14887, 'USC00519281', '2017-05-29', 0.4, 74.0),\n",
       " (2640, 'USC00519397', '2017-05-28', 0.02, 76.0),\n",
       " (5369, 'USC00513117', '2017-05-28', 0.29, 71.0),\n",
       " (7562, 'USC00514830', '2017-05-28', 0.02, 77.0),\n",
       " (12108, 'USC00519523', '2017-05-28', 0.0, 82.0),\n",
       " (14886, 'USC00519281', '2017-05-28', 0.08, 80.0),\n",
       " (19468, 'USC00516128', '2017-05-28', 0.0, 73.0),\n",
       " (2639, 'USC00519397', '2017-05-27', 0.01, 74.0),\n",
       " (5368, 'USC00513117', '2017-05-27', 0.0, 69.0),\n",
       " (7561, 'USC00514830', '2017-05-27', 0.0, 79.0),\n",
       " (12107, 'USC00519523', '2017-05-27', 0.0, 79.0),\n",
       " (14885, 'USC00519281', '2017-05-27', 0.0, 74.0),\n",
       " (19467, 'USC00516128', '2017-05-27', 0.5, 72.0),\n",
       " (5367, 'USC00513117', '2017-05-26', 0.02, 73.0),\n",
       " (7560, 'USC00514830', '2017-05-26', 0.0, 79.0),\n",
       " (12106, 'USC00519523', '2017-05-26', 0.0, 77.0),\n",
       " (14884, 'USC00519281', '2017-05-26', 0.0, 74.0),\n",
       " (19466, 'USC00516128', '2017-05-26', 0.0, 72.0),\n",
       " (2638, 'USC00519397', '2017-05-25', 0.15, 77.0),\n",
       " (5366, 'USC00513117', '2017-05-25', 0.37, 69.0),\n",
       " (7559, 'USC00514830', '2017-05-25', 0.07, 79.0),\n",
       " (12105, 'USC00519523', '2017-05-25', 0.55, 75.0),\n",
       " (14883, 'USC00519281', '2017-05-25', 0.2, 74.0),\n",
       " (19465, 'USC00516128', '2017-05-25', 0.88, 75.0),\n",
       " (2637, 'USC00519397', '2017-05-24', 0.13, 77.0),\n",
       " (5365, 'USC00513117', '2017-05-24', 0.58, 75.0),\n",
       " (7558, 'USC00514830', '2017-05-24', 0.1, 76.0),\n",
       " (12104, 'USC00519523', '2017-05-24', 0.61, 76.0),\n",
       " (14882, 'USC00519281', '2017-05-24', 0.3, 74.0),\n",
       " (19464, 'USC00516128', '2017-05-24', 2.17, 70.0),\n",
       " (2636, 'USC00519397', '2017-05-23', 0.08, 87.0),\n",
       " (5364, 'USC00513117', '2017-05-23', 0.02, 73.0),\n",
       " (7557, 'USC00514830', '2017-05-23', 0.11, 78.0),\n",
       " (12103, 'USC00519523', '2017-05-23', 0.0, 76.0),\n",
       " (14881, 'USC00519281', '2017-05-23', 0.06, 71.0),\n",
       " (19463, 'USC00516128', '2017-05-23', 0.44, 69.0),\n",
       " (2635, 'USC00519397', '2017-05-22', 0.0, 77.0),\n",
       " (5363, 'USC00513117', '2017-05-22', 0.0, 76.0),\n",
       " (7556, 'USC00514830', '2017-05-22', None, 79.0),\n",
       " (12102, 'USC00519523', '2017-05-22', 0.0, 76.0),\n",
       " (14880, 'USC00519281', '2017-05-22', 0.06, 71.0),\n",
       " (19462, 'USC00516128', '2017-05-22', 0.3, 72.0),\n",
       " (2634, 'USC00519397', '2017-05-21', 0.0, 76.0),\n",
       " (5362, 'USC00513117', '2017-05-21', 0.0, 72.0),\n",
       " (12101, 'USC00519523', '2017-05-21', 0.0, 80.0),\n",
       " (14879, 'USC00519281', '2017-05-21', 0.01, 74.0),\n",
       " (19461, 'USC00516128', '2017-05-21', 0.0, 69.0),\n",
       " (2633, 'USC00519397', '2017-05-20', 0.0, 78.0),\n",
       " (5361, 'USC00513117', '2017-05-20', 0.0, 72.0),\n",
       " (7555, 'USC00514830', '2017-05-20', 0.01, 79.0),\n",
       " (12100, 'USC00519523', '2017-05-20', None, 79.0),\n",
       " (14878, 'USC00519281', '2017-05-20', 0.02, 76.0),\n",
       " (19460, 'USC00516128', '2017-05-20', None, 70.0),\n",
       " (2632, 'USC00519397', '2017-05-19', 0.0, 76.0),\n",
       " (5360, 'USC00513117', '2017-05-19', 0.02, 70.0),\n",
       " (7554, 'USC00514830', '2017-05-19', 0.01, 79.0),\n",
       " (14877, 'USC00519281', '2017-05-19', 0.01, 68.0),\n",
       " (2631, 'USC00519397', '2017-05-18', 0.01, 73.0),\n",
       " (5359, 'USC00513117', '2017-05-18', 0.09, 70.0),\n",
       " (7553, 'USC00514830', '2017-05-18', 0.16, 78.0),\n",
       " (12099, 'USC00519523', '2017-05-18', 0.46, 71.0),\n",
       " (14876, 'USC00519281', '2017-05-18', 0.13, 69.0),\n",
       " (19459, 'USC00516128', '2017-05-18', 0.0, 69.0),\n",
       " (2630, 'USC00519397', '2017-05-17', 0.0, 78.0),\n",
       " (5358, 'USC00513117', '2017-05-17', 0.02, 75.0),\n",
       " (7552, 'USC00514830', '2017-05-17', 0.0, 78.0),\n",
       " (12098, 'USC00519523', '2017-05-17', 0.0, 77.0),\n",
       " (14875, 'USC00519281', '2017-05-17', 0.07, 74.0),\n",
       " (19458, 'USC00516128', '2017-05-17', 0.06, 71.0),\n",
       " (2629, 'USC00519397', '2017-05-16', 0.01, 78.0),\n",
       " (5357, 'USC00513117', '2017-05-16', 0.03, 75.0),\n",
       " (7551, 'USC00514830', '2017-05-16', 0.05, 77.0),\n",
       " (12097, 'USC00519523', '2017-05-16', 0.0, 76.0),\n",
       " (14874, 'USC00519281', '2017-05-16', 0.03, 74.0),\n",
       " (19457, 'USC00516128', '2017-05-16', 0.3, 71.0),\n",
       " (2628, 'USC00519397', '2017-05-15', 0.05, 78.0),\n",
       " (5356, 'USC00513117', '2017-05-15', 0.08, 75.0),\n",
       " (7550, 'USC00514830', '2017-05-15', None, 77.0),\n",
       " (12096, 'USC00519523', '2017-05-15', 0.06, 77.0),\n",
       " (14873, 'USC00519281', '2017-05-15', 0.09, 74.0),\n",
       " (19456, 'USC00516128', '2017-05-15', 0.6, 72.0),\n",
       " (2627, 'USC00519397', '2017-05-14', 0.0, 77.0),\n",
       " (5355, 'USC00513117', '2017-05-14', 0.05, 75.0),\n",
       " (12095, 'USC00519523', '2017-05-14', 0.0, 78.0),\n",
       " (14872, 'USC00519281', '2017-05-14', 0.17, 77.0),\n",
       " (19455, 'USC00516128', '2017-05-14', 1.0, 70.0),\n",
       " (2626, 'USC00519397', '2017-05-13', 0.0, 79.0),\n",
       " (5354, 'USC00513117', '2017-05-13', 0.02, 75.0),\n",
       " (12094, 'USC00519523', '2017-05-13', 0.0, 76.0),\n",
       " (14871, 'USC00519281', '2017-05-13', 0.12, 76.0),\n",
       " (19454, 'USC00516128', '2017-05-13', 0.1, 71.0),\n",
       " (2625, 'USC00519397', '2017-05-12', 0.0, 79.0),\n",
       " (5353, 'USC00513117', '2017-05-12', 0.04, 74.0),\n",
       " (7549, 'USC00514830', '2017-05-12', None, 78.0),\n",
       " (12093, 'USC00519523', '2017-05-12', 0.0, 77.0),\n",
       " (14870, 'USC00519281', '2017-05-12', 0.02, 75.0),\n",
       " (19453, 'USC00516128', '2017-05-12', 0.1, 70.0),\n",
       " (2624, 'USC00519397', '2017-05-11', 0.01, 78.0),\n",
       " (5352, 'USC00513117', '2017-05-11', 0.03, 74.0),\n",
       " (12092, 'USC00519523', '2017-05-11', 0.0, 78.0),\n",
       " (14869, 'USC00519281', '2017-05-11', 0.12, 70.0),\n",
       " (19452, 'USC00516128', '2017-05-11', 0.44, 78.0),\n",
       " (2623, 'USC00519397', '2017-05-10', 0.0, 78.0),\n",
       " (5351, 'USC00513117', '2017-05-10', 0.05, 75.0),\n",
       " (7548, 'USC00514830', '2017-05-10', 0.0, 76.0),\n",
       " (12091, 'USC00519523', '2017-05-10', 0.06, 76.0),\n",
       " (14868, 'USC00519281', '2017-05-10', 0.2, 74.0),\n",
       " (19451, 'USC00516128', '2017-05-10', 0.55, 72.0),\n",
       " (5350, 'USC00513117', '2017-05-09', 1.62, 74.0),\n",
       " (7547, 'USC00514830', '2017-05-09', 0.52, 79.0),\n",
       " (12090, 'USC00519523', '2017-05-09', 0.68, 75.0),\n",
       " (14867, 'USC00519281', '2017-05-09', 1.58, 67.0),\n",
       " (19450, 'USC00516128', '2017-05-09', 0.23, 72.0),\n",
       " (2622, 'USC00519397', '2017-05-08', 0.0, 77.0),\n",
       " (5349, 'USC00513117', '2017-05-08', 0.22, 71.0),\n",
       " (7546, 'USC00514830', '2017-05-08', 0.95, 73.0),\n",
       " (12089, 'USC00519523', '2017-05-08', 0.0, 80.0),\n",
       " (14866, 'USC00519281', '2017-05-08', 0.73, 70.0),\n",
       " (19449, 'USC00516128', '2017-05-08', 1.11, 66.0),\n",
       " (2621, 'USC00519397', '2017-05-07', 0.0, 79.0),\n",
       " (5348, 'USC00513117', '2017-05-07', 0.07, 75.0),\n",
       " (12088, 'USC00519523', '2017-05-07', 0.0, 78.0),\n",
       " (14865, 'USC00519281', '2017-05-07', 0.02, 75.0),\n",
       " (19448, 'USC00516128', '2017-05-07', 0.03, 70.0),\n",
       " (2620, 'USC00519397', '2017-05-06', 0.0, 79.0),\n",
       " (5347, 'USC00513117', '2017-05-06', 0.0, 75.0),\n",
       " (7545, 'USC00514830', '2017-05-06', 0.06, 78.0),\n",
       " (12087, 'USC00519523', '2017-05-06', 0.0, 80.0),\n",
       " (14864, 'USC00519281', '2017-05-06', 0.0, 79.0),\n",
       " (19447, 'USC00516128', '2017-05-06', 0.0, 74.0),\n",
       " (2619, 'USC00519397', '2017-05-05', 0.0, 79.0),\n",
       " (5346, 'USC00513117', '2017-05-05', 0.0, 78.0),\n",
       " (7544, 'USC00514830', '2017-05-05', 0.28, 78.0),\n",
       " (12086, 'USC00519523', '2017-05-05', 0.0, 79.0),\n",
       " (14863, 'USC00519281', '2017-05-05', 0.0, 70.0),\n",
       " (19446, 'USC00516128', '2017-05-05', 0.1, 74.0),\n",
       " (2618, 'USC00519397', '2017-05-04', 0.0, 78.0),\n",
       " (5345, 'USC00513117', '2017-05-04', 0.0, 77.0),\n",
       " (7543, 'USC00514830', '2017-05-04', 0.08, 77.0),\n",
       " (12085, 'USC00519523', '2017-05-04', 0.0, 77.0),\n",
       " (14862, 'USC00519281', '2017-05-04', 0.0, 75.0),\n",
       " (19445, 'USC00516128', '2017-05-04', None, 74.0),\n",
       " (2617, 'USC00519397', '2017-05-03', 0.0, 78.0),\n",
       " (5344, 'USC00513117', '2017-05-03', 0.01, 74.0),\n",
       " (7542, 'USC00514830', '2017-05-03', 0.01, 78.0),\n",
       " (12084, 'USC00519523', '2017-05-03', 0.0, 78.0),\n",
       " (14861, 'USC00519281', '2017-05-03', 0.01, 70.0),\n",
       " (2616, 'USC00519397', '2017-05-02', 0.0, 78.0),\n",
       " (5343, 'USC00513117', '2017-05-02', 0.03, 73.0),\n",
       " (7541, 'USC00514830', '2017-05-02', 0.01, 76.0),\n",
       " (12083, 'USC00519523', '2017-05-02', 0.0, 78.0),\n",
       " (14860, 'USC00519281', '2017-05-02', 0.01, 75.0),\n",
       " (19444, 'USC00516128', '2017-05-02', 0.0, 79.0),\n",
       " (2615, 'USC00519397', '2017-05-01', 0.26, 75.0),\n",
       " (5342, 'USC00513117', '2017-05-01', 0.07, 68.0),\n",
       " (7540, 'USC00514830', '2017-05-01', 0.03, 78.0),\n",
       " (12082, 'USC00519523', '2017-05-01', 0.07, 73.0),\n",
       " (14859, 'USC00519281', '2017-05-01', 0.13, 65.0),\n",
       " (19443, 'USC00516128', '2017-05-01', 0.25, 73.0),\n",
       " (2614, 'USC00519397', '2017-04-30', 0.89, 63.0),\n",
       " (5341, 'USC00513117', '2017-04-30', 1.21, 61.0),\n",
       " (7539, 'USC00514830', '2017-04-30', 1.17, 63.0),\n",
       " (12081, 'USC00519523', '2017-04-30', 1.31, 64.0),\n",
       " (14858, 'USC00519281', '2017-04-30', 1.04, 60.0),\n",
       " (19442, 'USC00516128', '2017-04-30', 0.8, 58.0),\n",
       " (2613, 'USC00519397', '2017-04-29', 0.12, 72.0),\n",
       " (5340, 'USC00513117', '2017-04-29', 0.35, 66.0),\n",
       " (7538, 'USC00514830', '2017-04-29', 0.95, 71.0),\n",
       " (12080, 'USC00519523', '2017-04-29', 6.25, 70.0),\n",
       " (14857, 'USC00519281', '2017-04-29', 0.37, 72.0),\n",
       " (19441, 'USC00516128', '2017-04-29', 0.0, 68.0),\n",
       " (2612, 'USC00519397', '2017-04-28', 0.0, 76.0),\n",
       " (5339, 'USC00513117', '2017-04-28', 2.6, 70.0),\n",
       " (7537, 'USC00514830', '2017-04-28', 0.09, 77.0),\n",
       " (8970, 'USC00517948', '2017-04-28', None, 76.0),\n",
       " (12079, 'USC00519523', '2017-04-28', 0.0, 76.0),\n",
       " (14856, 'USC00519281', '2017-04-28', 0.76, 67.0),\n",
       " (19440, 'USC00516128', '2017-04-28', 0.79, 71.0),\n",
       " (2611, 'USC00519397', '2017-04-27', 0.0, 78.0),\n",
       " (5338, 'USC00513117', '2017-04-27', 0.1, 73.0),\n",
       " (7536, 'USC00514830', '2017-04-27', 0.02, 78.0),\n",
       " (8969, 'USC00517948', '2017-04-27', None, 78.0),\n",
       " (12078, 'USC00519523', '2017-04-27', 0.0, 76.0),\n",
       " (14855, 'USC00519281', '2017-04-27', 0.19, 70.0),\n",
       " (19439, 'USC00516128', '2017-04-27', 0.11, 76.0),\n",
       " (2610, 'USC00519397', '2017-04-26', 0.0, 77.0),\n",
       " (5337, 'USC00513117', '2017-04-26', 0.0, 78.0),\n",
       " (7535, 'USC00514830', '2017-04-26', 0.14, 78.0),\n",
       " (12077, 'USC00519523', '2017-04-26', 0.01, 81.0),\n",
       " (14854, 'USC00519281', '2017-04-26', 0.02, 74.0),\n",
       " (19438, 'USC00516128', '2017-04-26', 0.22, 77.0),\n",
       " (2609, 'USC00519397', '2017-04-25', 0.0, 77.0),\n",
       " (5336, 'USC00513117', '2017-04-25', 0.0, 75.0),\n",
       " (7534, 'USC00514830', '2017-04-25', 0.0, 77.0),\n",
       " (8968, 'USC00517948', '2017-04-25', None, 78.0),\n",
       " (12076, 'USC00519523', '2017-04-25', 0.0, 76.0),\n",
       " (14853, 'USC00519281', '2017-04-25', 0.0, 72.0),\n",
       " (19437, 'USC00516128', '2017-04-25', 0.0, 74.0),\n",
       " (2608, 'USC00519397', '2017-04-24', 0.0, 77.0),\n",
       " (5335, 'USC00513117', '2017-04-24', 0.0, 76.0),\n",
       " (7533, 'USC00514830', '2017-04-24', None, 79.0),\n",
       " (8967, 'USC00517948', '2017-04-24', None, 78.0),\n",
       " (12075, 'USC00519523', '2017-04-24', None, 80.0),\n",
       " (14852, 'USC00519281', '2017-04-24', 0.01, 68.0),\n",
       " (19436, 'USC00516128', '2017-04-24', 0.05, 75.0),\n",
       " (2607, 'USC00519397', '2017-04-23', 0.03, 77.0),\n",
       " (5334, 'USC00513117', '2017-04-23', 0.02, 75.0),\n",
       " (14851, 'USC00519281', '2017-04-23', 0.06, 76.0),\n",
       " (19435, 'USC00516128', '2017-04-23', 0.35, 70.0),\n",
       " (2606, 'USC00519397', '2017-04-22', 0.32, 76.0),\n",
       " (5333, 'USC00513117', '2017-04-22', 1.01, 74.0),\n",
       " (7532, 'USC00514830', '2017-04-22', 0.7, 74.0),\n",
       " (14850, 'USC00519281', '2017-04-22', 1.58, 72.0),\n",
       " (19434, 'USC00516128', '2017-04-22', 1.35, 73.0),\n",
       " (2605, 'USC00519397', '2017-04-21', 0.23, 73.0),\n",
       " (5332, 'USC00513117', '2017-04-21', 1.16, 70.0),\n",
       " (7531, 'USC00514830', '2017-04-21', 1.05, 70.0),\n",
       " (8966, 'USC00517948', '2017-04-21', None, 74.0),\n",
       " (12074, 'USC00519523', '2017-04-21', 2.36, 70.0),\n",
       " (14849, 'USC00519281', '2017-04-21', 1.74, 69.0),\n",
       " (19433, 'USC00516128', '2017-04-21', 1.84, 70.0),\n",
       " (2604, 'USC00519397', '2017-04-20', 0.05, 78.0),\n",
       " (5331, 'USC00513117', '2017-04-20', 0.33, 75.0),\n",
       " (7530, 'USC00514830', '2017-04-20', 0.0, 74.0),\n",
       " (8965, 'USC00517948', '2017-04-20', None, 75.0),\n",
       " (12073, 'USC00519523', '2017-04-20', 0.35, 76.0),\n",
       " (14848, 'USC00519281', '2017-04-20', 0.05, 76.0),\n",
       " (19432, 'USC00516128', '2017-04-20', 0.0, 69.0),\n",
       " (2603, 'USC00519397', '2017-04-19', 0.02, 74.0),\n",
       " (5330, 'USC00513117', '2017-04-19', 0.02, 70.0),\n",
       " (7529, 'USC00514830', '2017-04-19', 0.0, 83.0),\n",
       " (8964, 'USC00517948', '2017-04-19', None, 76.0),\n",
       " (12072, 'USC00519523', '2017-04-19', 0.0, 74.0),\n",
       " (14847, 'USC00519281', '2017-04-19', 0.02, 67.0),\n",
       " (19431, 'USC00516128', '2017-04-19', 0.14, 71.0),\n",
       " (2602, 'USC00519397', '2017-04-18', 0.0, 75.0),\n",
       " (5329, 'USC00513117', '2017-04-18', 0.08, 70.0),\n",
       " (7528, 'USC00514830', '2017-04-18', 0.12, 76.0),\n",
       " (8963, 'USC00517948', '2017-04-18', 0.0, 75.0),\n",
       " (12071, 'USC00519523', '2017-04-18', 0.15, 76.0),\n",
       " (14846, 'USC00519281', '2017-04-18', 2.03, 68.0),\n",
       " (19430, 'USC00516128', '2017-04-18', 0.98, 71.0),\n",
       " (2601, 'USC00519397', '2017-04-17', 0.02, 74.0),\n",
       " (5328, 'USC00513117', '2017-04-17', 0.41, 69.0),\n",
       " (7527, 'USC00514830', '2017-04-17', None, 69.0),\n",
       " (8962, 'USC00517948', '2017-04-17', None, 72.0),\n",
       " (12070, 'USC00519523', '2017-04-17', 0.3, 71.0),\n",
       " (14845, 'USC00519281', '2017-04-17', 1.04, 67.0),\n",
       " (19429, 'USC00516128', '2017-04-17', 1.3, 69.0),\n",
       " (2600, 'USC00519397', '2017-04-16', 0.0, 74.0),\n",
       " (5327, 'USC00513117', '2017-04-16', 0.49, 69.0),\n",
       " (12069, 'USC00519523', '2017-04-16', 0.0, 74.0),\n",
       " (14844, 'USC00519281', '2017-04-16', 0.47, 71.0),\n",
       " (19428, 'USC00516128', '2017-04-16', 0.11, 71.0),\n",
       " (2599, 'USC00519397', '2017-04-15', 0.01, 73.0),\n",
       " (5326, 'USC00513117', '2017-04-15', 0.45, 70.0),\n",
       " (12068, 'USC00519523', '2017-04-15', 0.0, 79.0),\n",
       " (14843, 'USC00519281', '2017-04-15', 0.38, 78.0),\n",
       " (19427, 'USC00516128', '2017-04-15', 0.9, 70.0),\n",
       " (2598, 'USC00519397', '2017-04-14', 0.26, 75.0),\n",
       " (5325, 'USC00513117', '2017-04-14', 0.69, 70.0),\n",
       " (7526, 'USC00514830', '2017-04-14', 0.29, 77.0),\n",
       " (12067, 'USC00519523', '2017-04-14', 0.36, 75.0),\n",
       " (14842, 'USC00519281', '2017-04-14', 2.3, 74.0),\n",
       " (19426, 'USC00516128', '2017-04-14', 2.82, 72.0),\n",
       " (2597, 'USC00519397', '2017-04-13', 0.0, 77.0),\n",
       " (5324, 'USC00513117', '2017-04-13', 0.27, 71.0),\n",
       " (7525, 'USC00514830', '2017-04-13', 0.0, 77.0),\n",
       " (8961, 'USC00517948', '2017-04-13', None, 76.0),\n",
       " (12066, 'USC00519523', '2017-04-13', 0.0, 79.0),\n",
       " (14841, 'USC00519281', '2017-04-13', 0.59, 69.0),\n",
       " (19425, 'USC00516128', '2017-04-13', 0.23, 73.0),\n",
       " (2596, 'USC00519397', '2017-04-12', 0.0, 78.0),\n",
       " (5323, 'USC00513117', '2017-04-12', 0.03, 74.0),\n",
       " (7524, 'USC00514830', '2017-04-12', 0.29, 77.0),\n",
       " (8960, 'USC00517948', '2017-04-12', None, 74.0),\n",
       " (12065, 'USC00519523', '2017-04-12', 0.0, 80.0),\n",
       " (14840, 'USC00519281', '2017-04-12', 0.11, 69.0),\n",
       " (19424, 'USC00516128', '2017-04-12', 0.65, 70.0),\n",
       " (2595, 'USC00519397', '2017-04-11', 0.0, 79.0),\n",
       " (5322, 'USC00513117', '2017-04-11', 0.03, 75.0),\n",
       " (7523, 'USC00514830', '2017-04-11', 0.16, 77.0),\n",
       " (8959, 'USC00517948', '2017-04-11', None, 76.0),\n",
       " (12064, 'USC00519523', '2017-04-11', 0.0, 82.0),\n",
       " (14839, 'USC00519281', '2017-04-11', 0.03, 70.0),\n",
       " (19423, 'USC00516128', '2017-04-11', 0.25, 71.0),\n",
       " (2594, 'USC00519397', '2017-04-10', 0.0, 75.0),\n",
       " (5321, 'USC00513117', '2017-04-10', 0.01, 71.0),\n",
       " (7522, 'USC00514830', '2017-04-10', 0.0, 79.0),\n",
       " (8958, 'USC00517948', '2017-04-10', None, 75.0),\n",
       " (12063, 'USC00519523', '2017-04-10', 0.0, 75.0),\n",
       " (14838, 'USC00519281', '2017-04-10', 0.01, 67.0),\n",
       " (19422, 'USC00516128', '2017-04-10', 0.0, 72.0),\n",
       " (2593, 'USC00519397', '2017-04-09', 0.0, 72.0),\n",
       " (5320, 'USC00513117', '2017-04-09', 0.0, 69.0),\n",
       " (7521, 'USC00514830', '2017-04-09', None, 77.0),\n",
       " (12062, 'USC00519523', '2017-04-09', None, 74.0),\n",
       " (14837, 'USC00519281', '2017-04-09', 0.0, 78.0),\n",
       " (19421, 'USC00516128', '2017-04-09', 0.0, 70.0),\n",
       " (2592, 'USC00519397', '2017-04-08', 0.0, 77.0),\n",
       " (5319, 'USC00513117', '2017-04-08', 0.0, 73.0),\n",
       " (14836, 'USC00519281', '2017-04-08', 0.0, 77.0),\n",
       " (19420, 'USC00516128', '2017-04-08', None, 76.0),\n",
       " (2591, 'USC00519397', '2017-04-07', 0.0, 77.0),\n",
       " (5318, 'USC00513117', '2017-04-07', 0.0, 74.0),\n",
       " (7520, 'USC00514830', '2017-04-07', 0.0, 76.0),\n",
       " (8957, 'USC00517948', '2017-04-07', 0.0, 76.0),\n",
       " (12061, 'USC00519523', '2017-04-07', 0.0, 78.0),\n",
       " (14835, 'USC00519281', '2017-04-07', 0.0, 74.0),\n",
       " (2590, 'USC00519397', '2017-04-06', 0.0, 77.0),\n",
       " (5317, 'USC00513117', '2017-04-06', 0.0, 73.0),\n",
       " (7519, 'USC00514830', '2017-04-06', 0.0, 76.0),\n",
       " (8956, 'USC00517948', '2017-04-06', 0.0, 73.0),\n",
       " (12060, 'USC00519523', '2017-04-06', 0.0, 76.0),\n",
       " (14834, 'USC00519281', '2017-04-06', 0.06, 67.0),\n",
       " (19419, 'USC00516128', '2017-04-06', 0.0, 72.0),\n",
       " (2589, 'USC00519397', '2017-04-05', 0.0, 78.0),\n",
       " (5316, 'USC00513117', '2017-04-05', 0.04, 72.0),\n",
       " (7518, 'USC00514830', '2017-04-05', 0.07, 77.0),\n",
       " (8955, 'USC00517948', '2017-04-05', 0.0, 73.0),\n",
       " (12059, 'USC00519523', '2017-04-05', 0.0, 77.0),\n",
       " (14833, 'USC00519281', '2017-04-05', 0.1, 71.0),\n",
       " (19418, 'USC00516128', '2017-04-05', 0.45, 69.0),\n",
       " (2588, 'USC00519397', '2017-04-04', 0.0, 76.0),\n",
       " (5315, 'USC00513117', '2017-04-04', 0.04, 72.0),\n",
       " (7517, 'USC00514830', '2017-04-04', 0.0, 76.0),\n",
       " (8954, 'USC00517948', '2017-04-04', 0.0, 75.0),\n",
       " (12058, 'USC00519523', '2017-04-04', 0.0, 78.0),\n",
       " (14832, 'USC00519281', '2017-04-04', 0.09, 67.0),\n",
       " (19417, 'USC00516128', '2017-04-04', 0.02, 75.0),\n",
       " (2587, 'USC00519397', '2017-04-03', 0.0, 77.0),\n",
       " (5314, 'USC00513117', '2017-04-03', 0.08, 73.0),\n",
       " (7516, 'USC00514830', '2017-04-03', 0.09, 77.0),\n",
       " (8953, 'USC00517948', '2017-04-03', None, 75.0),\n",
       " (12057, 'USC00519523', '2017-04-03', 0.0, 76.0),\n",
       " (14831, 'USC00519281', '2017-04-03', 0.26, 70.0),\n",
       " (19416, 'USC00516128', '2017-04-03', 0.23, 73.0),\n",
       " (2586, 'USC00519397', '2017-04-02', 0.0, 76.0),\n",
       " (5313, 'USC00513117', '2017-04-02', 0.0, 74.0),\n",
       " (7515, 'USC00514830', '2017-04-02', 0.0, 77.0),\n",
       " (12056, 'USC00519523', '2017-04-02', 0.0, 79.0),\n",
       " (14830, 'USC00519281', '2017-04-02', 0.0, 75.0),\n",
       " (19415, 'USC00516128', '2017-04-02', 0.0, 71.0),\n",
       " (2585, 'USC00519397', '2017-04-01', 0.0, 76.0),\n",
       " (5312, 'USC00513117', '2017-04-01', 0.0, 76.0),\n",
       " (7514, 'USC00514830', '2017-04-01', 0.0, 78.0),\n",
       " (12055, 'USC00519523', '2017-04-01', 0.0, 80.0),\n",
       " (14829, 'USC00519281', '2017-04-01', 0.21, 74.0),\n",
       " (19414, 'USC00516128', '2017-04-01', 0.2, 69.0),\n",
       " (2584, 'USC00519397', '2017-03-31', 0.0, 76.0),\n",
       " (5311, 'USC00513117', '2017-03-31', 0.0, 74.0),\n",
       " (7513, 'USC00514830', '2017-03-31', 0.0, 77.0),\n",
       " (8952, 'USC00517948', '2017-03-31', 0.0, 78.0),\n",
       " (12054, 'USC00519523', '2017-03-31', 0.0, 75.0),\n",
       " (14828, 'USC00519281', '2017-03-31', 0.01, 71.0),\n",
       " (19413, 'USC00516128', '2017-03-31', None, 76.0),\n",
       " (2583, 'USC00519397', '2017-03-30', 0.0, 77.0),\n",
       " (5310, 'USC00513117', '2017-03-30', 0.08, 74.0),\n",
       " (7512, 'USC00514830', '2017-03-30', 0.03, 78.0),\n",
       " (8951, 'USC00517948', '2017-03-30', None, 77.0),\n",
       " (12053, 'USC00519523', '2017-03-30', 0.0, 78.0),\n",
       " (14827, 'USC00519281', '2017-03-30', 0.04, 73.0),\n",
       " (2582, 'USC00519397', '2017-03-29', 0.0, 76.0),\n",
       " (5309, 'USC00513117', '2017-03-29', 0.0, 73.0),\n",
       " (7511, 'USC00514830', '2017-03-29', 0.03, 77.0),\n",
       " (8950, 'USC00517948', '2017-03-29', None, 74.0),\n",
       " (12052, 'USC00519523', '2017-03-29', 0.08, 74.0),\n",
       " (14826, 'USC00519281', '2017-03-29', 0.01, 68.0),\n",
       " (19412, 'USC00516128', '2017-03-29', 0.07, 69.0),\n",
       " (2581, 'USC00519397', '2017-03-28', 0.0, 77.0),\n",
       " (5308, 'USC00513117', '2017-03-28', 0.03, 75.0),\n",
       " (7510, 'USC00514830', '2017-03-28', 0.0, 78.0),\n",
       " (8949, 'USC00517948', '2017-03-28', None, 73.0),\n",
       " (12051, 'USC00519523', '2017-03-28', 0.0, 76.0),\n",
       " (14825, 'USC00519281', '2017-03-28', 0.0, 74.0),\n",
       " (19411, 'USC00516128', '2017-03-28', 0.68, 69.0),\n",
       " (2580, 'USC00519397', '2017-03-27', 0.0, 75.0),\n",
       " (5307, 'USC00513117', '2017-03-27', 0.0, 74.0),\n",
       " (7509, 'USC00514830', '2017-03-27', None, 78.0),\n",
       " (12050, 'USC00519523', '2017-03-27', 0.0, 76.0),\n",
       " (14824, 'USC00519281', '2017-03-27', 0.01, 76.0),\n",
       " (19410, 'USC00516128', '2017-03-27', 0.0, 74.0),\n",
       " (2579, 'USC00519397', '2017-03-26', 0.0, 76.0),\n",
       " (5306, 'USC00513117', '2017-03-26', 0.0, 75.0),\n",
       " (12049, 'USC00519523', '2017-03-26', 0.0, 80.0),\n",
       " (14823, 'USC00519281', '2017-03-26', 0.0, 77.0),\n",
       " (19409, 'USC00516128', '2017-03-26', 0.0, 72.0),\n",
       " (2578, 'USC00519397', '2017-03-25', 0.0, 76.0),\n",
       " (5305, 'USC00513117', '2017-03-25', 0.13, 72.0),\n",
       " (12048, 'USC00519523', '2017-03-25', 0.43, 75.0),\n",
       " (14822, 'USC00519281', '2017-03-25', 0.93, 76.0),\n",
       " (19408, 'USC00516128', '2017-03-25', 0.48, 72.0),\n",
       " (2577, 'USC00519397', '2017-03-24', 0.02, 73.0),\n",
       " (5304, 'USC00513117', '2017-03-24', 0.6, 72.0),\n",
       " (7508, 'USC00514830', '2017-03-24', 0.15, 75.0),\n",
       " (12047, 'USC00519523', '2017-03-24', 0.07, 76.0),\n",
       " (14821, 'USC00519281', '2017-03-24', 0.12, 71.0),\n",
       " (19407, 'USC00516128', '2017-03-24', 0.17, 70.0),\n",
       " (2576, 'USC00519397', '2017-03-23', 0.0, 70.0),\n",
       " (5303, 'USC00513117', '2017-03-23', 0.0, 74.0),\n",
       " (7507, 'USC00514830', '2017-03-23', 0.0, 78.0),\n",
       " (12046, 'USC00519523', '2017-03-23', 0.02, 75.0),\n",
       " (14820, 'USC00519281', '2017-03-23', 0.0, 72.0),\n",
       " (19406, 'USC00516128', '2017-03-23', 0.03, 70.0),\n",
       " (2575, 'USC00519397', '2017-03-22', 0.0, 74.0),\n",
       " (5302, 'USC00513117', '2017-03-22', 0.0, 74.0),\n",
       " (7506, 'USC00514830', '2017-03-22', 0.0, 76.0),\n",
       " (12045, 'USC00519523', '2017-03-22', 0.0, 75.0),\n",
       " (14819, 'USC00519281', '2017-03-22', 0.0, 73.0),\n",
       " (19405, 'USC00516128', '2017-03-22', 0.0, 72.0),\n",
       " (2574, 'USC00519397', '2017-03-21', 0.0, 75.0),\n",
       " (5301, 'USC00513117', '2017-03-21', 0.0, 73.0),\n",
       " (7505, 'USC00514830', '2017-03-21', 0.0, 76.0),\n",
       " (12044, 'USC00519523', '2017-03-21', 0.0, 75.0),\n",
       " (14818, 'USC00519281', '2017-03-21', 0.09, 72.0),\n",
       " (19404, 'USC00516128', '2017-03-21', 0.0, 72.0),\n",
       " (2573, 'USC00519397', '2017-03-20', 0.0, 75.0),\n",
       " (5300, 'USC00513117', '2017-03-20', 0.0, 72.0),\n",
       " (7504, 'USC00514830', '2017-03-20', None, 77.0),\n",
       " (12043, 'USC00519523', '2017-03-20', 0.0, 75.0),\n",
       " (14817, 'USC00519281', '2017-03-20', 0.02, 69.0),\n",
       " (19403, 'USC00516128', '2017-03-20', 0.0, 74.0),\n",
       " (2572, 'USC00519397', '2017-03-19', 0.0, 73.0),\n",
       " (5299, 'USC00513117', '2017-03-19', 0.0, 72.0),\n",
       " (12042, 'USC00519523', '2017-03-19', 0.0, 74.0),\n",
       " (14816, 'USC00519281', '2017-03-19', 0.0, 74.0),\n",
       " (19402, 'USC00516128', '2017-03-19', 0.0, 74.0),\n",
       " (2571, 'USC00519397', '2017-03-18', 0.0, 69.0),\n",
       " (5298, 'USC00513117', '2017-03-18', 0.0, 67.0),\n",
       " (7503, 'USC00514830', '2017-03-18', 0.0, 76.0),\n",
       " (12041, 'USC00519523', '2017-03-18', 0.0, 74.0),\n",
       " (14815, 'USC00519281', '2017-03-18', 0.0, 65.0),\n",
       " (19401, 'USC00516128', '2017-03-18', None, 70.0),\n",
       " (2570, 'USC00519397', '2017-03-17', 0.0, 72.0),\n",
       " (5297, 'USC00513117', '2017-03-17', 0.19, 69.0),\n",
       " (7502, 'USC00514830', '2017-03-17', 0.06, 72.0),\n",
       " (8948, 'USC00517948', '2017-03-17', None, 72.0),\n",
       " (12040, 'USC00519523', '2017-03-17', 0.35, 70.0),\n",
       " (14814, 'USC00519281', '2017-03-17', 0.12, 68.0),\n",
       " (2569, 'USC00519397', '2017-03-16', 0.0, 70.0),\n",
       " (5296, 'USC00513117', '2017-03-16', 0.0, 69.0),\n",
       " (7501, 'USC00514830', '2017-03-16', None, 77.0),\n",
       " (8947, 'USC00517948', '2017-03-16', None, 71.0),\n",
       " (12039, 'USC00519523', '2017-03-16', 0.0, 69.0),\n",
       " (14813, 'USC00519281', '2017-03-16', 0.0, 66.0),\n",
       " (19400, 'USC00516128', '2017-03-16', 0.0, 77.0),\n",
       " (2568, 'USC00519397', '2017-03-15', 0.0, 71.0),\n",
       " (5295, 'USC00513117', '2017-03-15', 0.0, 71.0),\n",
       " (8946, 'USC00517948', '2017-03-15', 0.0, 75.0),\n",
       " (12038, 'USC00519523', '2017-03-15', 0.0, 71.0),\n",
       " (14812, 'USC00519281', '2017-03-15', 0.06, 69.0),\n",
       " (19399, 'USC00516128', '2017-03-15', 0.0, 76.0),\n",
       " (2567, 'USC00519397', '2017-03-14', 0.0, 71.0),\n",
       " (5294, 'USC00513117', '2017-03-14', 0.0, 70.0),\n",
       " (7500, 'USC00514830', '2017-03-14', 0.0, 77.0),\n",
       " (8945, 'USC00517948', '2017-03-14', 0.06, 73.0),\n",
       " (12037, 'USC00519523', '2017-03-14', 0.0, 74.0),\n",
       " (14811, 'USC00519281', '2017-03-14', 0.0, 67.0),\n",
       " (19398, 'USC00516128', '2017-03-14', 0.0, 75.0),\n",
       " (2566, 'USC00519397', '2017-03-13', 0.0, 71.0),\n",
       " (5293, 'USC00513117', '2017-03-13', 0.0, 70.0),\n",
       " (7499, 'USC00514830', '2017-03-13', 0.0, 77.0),\n",
       " (8944, 'USC00517948', '2017-03-13', None, 69.0),\n",
       " (12036, 'USC00519523', '2017-03-13', 0.0, 69.0),\n",
       " (14810, 'USC00519281', '2017-03-13', 0.0, 66.0),\n",
       " (19397, 'USC00516128', '2017-03-13', None, 69.0),\n",
       " (2565, 'USC00519397', '2017-03-12', 0.0, 74.0),\n",
       " (5292, 'USC00513117', '2017-03-12', 0.0, 70.0),\n",
       " (7498, 'USC00514830', '2017-03-12', None, 80.0),\n",
       " (12035, 'USC00519523', '2017-03-12', 0.0, 74.0),\n",
       " (14809, 'USC00519281', '2017-03-12', 0.0, 69.0),\n",
       " (2564, 'USC00519397', '2017-03-11', 0.0, 71.0),\n",
       " (5291, 'USC00513117', '2017-03-11', 0.03, 68.0),\n",
       " (12034, 'USC00519523', '2017-03-11', 0.0, 81.0),\n",
       " (14808, 'USC00519281', '2017-03-11', 0.01, 81.0),\n",
       " (19396, 'USC00516128', '2017-03-11', 0.0, 82.0),\n",
       " (2563, 'USC00519397', '2017-03-10', 0.0, 68.0),\n",
       " (5290, 'USC00513117', '2017-03-10', 0.13, 68.0),\n",
       " (7497, 'USC00514830', '2017-03-10', 0.13, 75.0),\n",
       " (8943, 'USC00517948', '2017-03-10', 0.0, 68.0),\n",
       " (12033, 'USC00519523', '2017-03-10', 0.0, 69.0),\n",
       " (14807, 'USC00519281', '2017-03-10', 0.03, 66.0),\n",
       " (19395, 'USC00516128', '2017-03-10', 0.0, 65.0),\n",
       " (2562, 'USC00519397', '2017-03-09', 0.0, 72.0),\n",
       " (5289, 'USC00513117', '2017-03-09', 0.8, 67.0),\n",
       " (7496, 'USC00514830', '2017-03-09', 0.5, 69.0),\n",
       " (8942, 'USC00517948', '2017-03-09', 0.0, 68.0),\n",
       " (12032, 'USC00519523', '2017-03-09', None, 70.0),\n",
       " (14806, 'USC00519281', '2017-03-09', 0.65, 67.0),\n",
       " (19394, 'USC00516128', '2017-03-09', 0.01, 72.0),\n",
       " (2561, 'USC00519397', '2017-03-08', 0.0, 71.0),\n",
       " (5288, 'USC00513117', '2017-03-08', 0.0, 70.0),\n",
       " (7495, 'USC00514830', '2017-03-08', 0.0, 74.0),\n",
       " (8941, 'USC00517948', '2017-03-08', None, 67.0),\n",
       " (14805, 'USC00519281', '2017-03-08', 0.0, 64.0),\n",
       " (19393, 'USC00516128', '2017-03-08', 0.0, 68.0),\n",
       " (2560, 'USC00519397', '2017-03-07', 0.0, 68.0),\n",
       " (5287, 'USC00513117', '2017-03-07', 0.0, 65.0),\n",
       " (7494, 'USC00514830', '2017-03-07', 0.0, 74.0),\n",
       " (8940, 'USC00517948', '2017-03-07', None, 67.0),\n",
       " (14804, 'USC00519281', '2017-03-07', 0.0, 62.0),\n",
       " (19392, 'USC00516128', '2017-03-07', 0.0, 72.0),\n",
       " (2559, 'USC00519397', '2017-03-06', 0.0, 69.0),\n",
       " (5286, 'USC00513117', '2017-03-06', 0.51, 66.0),\n",
       " (7493, 'USC00514830', '2017-03-06', None, 74.0),\n",
       " (8939, 'USC00517948', '2017-03-06', None, 67.0),\n",
       " (12031, 'USC00519523', '2017-03-06', None, 69.0),\n",
       " (14803, 'USC00519281', '2017-03-06', 0.03, 67.0),\n",
       " (19391, 'USC00516128', '2017-03-06', 0.0, 76.0),\n",
       " ...]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform a query to retrieve the data and precipitation scores\n",
    "sel = [Measurement.id, \n",
    "       Measurement.station, \n",
    "       Measurement.date, \n",
    "       Measurement.prcp,\n",
    "       Measurement.tobs]\n",
    "last_twelve =  session.query(*sel).\\\n",
    "    filter(Measurement.date >= start_date).\\\n",
    "    order_by(Measurement.date.desc()).all()\n",
    "last_twelve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>station</th>\n",
       "      <th>prcp</th>\n",
       "      <th>tobs</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-08-23</th>\n",
       "      <td>2724</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>0.00</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-23</th>\n",
       "      <td>7635</td>\n",
       "      <td>USC00514830</td>\n",
       "      <td>0.00</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-23</th>\n",
       "      <td>12187</td>\n",
       "      <td>USC00519523</td>\n",
       "      <td>0.08</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-23</th>\n",
       "      <td>19550</td>\n",
       "      <td>USC00516128</td>\n",
       "      <td>0.45</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-22</th>\n",
       "      <td>2723</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>0.00</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               id      station  prcp  tobs\n",
       "date                                      \n",
       "2017-08-23   2724  USC00519397  0.00  81.0\n",
       "2017-08-23   7635  USC00514830  0.00  82.0\n",
       "2017-08-23  12187  USC00519523  0.08  82.0\n",
       "2017-08-23  19550  USC00516128  0.45  76.0\n",
       "2017-08-22   2723  USC00519397  0.00  82.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Save the query results as a Pandas DataFrame and set the index to the date column\n",
    "\n",
    "l_twlve = pd.DataFrame(last_twelve, columns=['id', 'station', 'date', 'prcp', 'tobs'])\n",
    "l_twlve.set_index('date', inplace=True)\n",
    "l_twlve.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>station</th>\n",
       "      <th>prcp</th>\n",
       "      <th>tobs</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>19202</td>\n",
       "      <td>USC00516128</td>\n",
       "      <td>0.70</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>2364</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>0.00</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>5091</td>\n",
       "      <td>USC00513117</td>\n",
       "      <td>0.15</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>14608</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>1.79</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>8825</td>\n",
       "      <td>USC00517948</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-22</th>\n",
       "      <td>2723</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>0.00</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-23</th>\n",
       "      <td>19550</td>\n",
       "      <td>USC00516128</td>\n",
       "      <td>0.45</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-23</th>\n",
       "      <td>12187</td>\n",
       "      <td>USC00519523</td>\n",
       "      <td>0.08</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-23</th>\n",
       "      <td>7635</td>\n",
       "      <td>USC00514830</td>\n",
       "      <td>0.00</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-08-23</th>\n",
       "      <td>2724</td>\n",
       "      <td>USC00519397</td>\n",
       "      <td>0.00</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2230 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               id      station  prcp  tobs\n",
       "date                                      \n",
       "2016-08-23  19202  USC00516128  0.70  74.0\n",
       "2016-08-23   2364  USC00519397  0.00  81.0\n",
       "2016-08-23   5091  USC00513117  0.15  76.0\n",
       "2016-08-23  14608  USC00519281  1.79  77.0\n",
       "2016-08-23   8825  USC00517948   NaN  80.0\n",
       "...           ...          ...   ...   ...\n",
       "2017-08-22   2723  USC00519397  0.00  82.0\n",
       "2017-08-23  19550  USC00516128  0.45  76.0\n",
       "2017-08-23  12187  USC00519523  0.08  82.0\n",
       "2017-08-23   7635  USC00514830  0.00  82.0\n",
       "2017-08-23   2724  USC00519397  0.00  81.0\n",
       "\n",
       "[2230 rows x 4 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort the dataframe by date\n",
    "l_twlve.sort_values(by='date', ascending=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use Pandas Plotting with Matplotlib to plot the data\n",
    "last_twelve_prcp = l_twlve.drop(columns=['id','tobs'])\n",
    "last_twelve_prcp.groupby(['station']).sum().plot.bar()\n",
    "plt.xlabel(\"Station\")\n",
    "plt.ylabel(\"Rainfall Total\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use Pandas Plotting with Matplotlib to plot the data\n",
    "last_twelve_tobs = l_twlve.drop(columns=['id','prcp'])\n",
    "last_twelve_tobs.groupby(['date']).mean().plot.line()\n",
    "plt.ylim(0,365)\n",
    "plt.ylim(50,90)\n",
    "plt.xlabel(\"Date\")\n",
    "plt.ylabel(\"Avg Temp\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prcp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2021.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.177279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.461190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.130000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              prcp\n",
       "count  2021.000000\n",
       "mean      0.177279\n",
       "std       0.461190\n",
       "min       0.000000\n",
       "25%       0.000000\n",
       "50%       0.020000\n",
       "75%       0.130000\n",
       "max       6.700000"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use Pandas to calculate the summary statistics for the precipitation data\n",
    "last_twelve_prcp_summary1 = l_twlve.describe()\n",
    "last_twelve_prcp_summary = last_twelve_prcp_summary1.drop(columns=['id','tobs'])\n",
    "last_twelve_prcp_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00519281', 2772),\n",
       " ('USC00519397', 2724),\n",
       " ('USC00513117', 2709),\n",
       " ('USC00519523', 2669),\n",
       " ('USC00516128', 2612),\n",
       " ('USC00514830', 2202),\n",
       " ('USC00511918', 1979),\n",
       " ('USC00517948', 1372),\n",
       " ('USC00518838', 511)]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Design a query to find the most active stations (i.e. what stations have the most rows?)\n",
    "\n",
    "# List the stations and the counts in descending order.\n",
    "\n",
    "sel = [Measurement.station,\n",
    "       func.count(Measurement.station)]\n",
    "station_count = session.query(*sel).\\\n",
    "    group_by(Measurement.station).\\\n",
    "    order_by((func.count(Measurement.station)).desc()).all()\n",
    "station_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "station    USC00519281\n",
      "tobs                83\n",
      "dtype: object\n",
      "station    USC00519281\n",
      "tobs                59\n",
      "dtype: object\n",
      "tobs    73.107955\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Using the most active station id from the previous query, calculate the lowest, highest, and average temperature.\n",
    "\n",
    "is_most_active =  last_twelve_tobs['station']=='USC00519281'\n",
    "last_twelve_tobs_most_active = last_twelve_tobs[is_most_active]\n",
    "print(last_twelve_tobs_most_active.max())\n",
    "print(last_twelve_tobs_most_active.min())\n",
    "print(last_twelve_tobs_most_active.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-27-1374e93e70b5>, line 8)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-27-1374e93e70b5>\"\u001b[1;36m, line \u001b[1;32m8\u001b[0m\n\u001b[1;33m    .filter(Measurement.station=='USC00519281')\\\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Using the most active station id\n",
    "# Query the last 12 months of temperature observation data for this station and plot the results as a histogram\n",
    "month = func.date_trunc('month', Measurement.date)\n",
    "sel = [Measurement.station,\n",
    "       Measurement.date,\n",
    "       Measurement.tobs]\n",
    "USC00519281 =  session.query(func.date_trunc('month', Measurement.date),\\\n",
    "    .filter(Measurement.station=='USC00519281')\\\n",
    "    .group_by(func.date_trunc('month', Measurement.date),\n",
    "              func.avg(Measurement.tobs))\n",
    "USC00519281"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use Pandas Plotting with Matplotlib to plot the data\n",
    "last_twelve_temp_most_active = l_twlve.drop(columns=['id','tobs'])\n",
    "last_twelve_prcp.groupby(['station']).sum().plot.bar()\n",
    "plt.xlabel(\"Station\")\n",
    "plt.ylabel(\"Rainfall Total\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: on\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Restarting with windowsapi reloader\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "1",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[1;31mSystemExit\u001b[0m\u001b[1;31m:\u001b[0m 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\eddie\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3351: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "#################################################\n",
    "# Flask Setup\n",
    "#################################################\n",
    "app = Flask(__name__)\n",
    "\n",
    "\n",
    "#################################################\n",
    "# Flask Routes\n",
    "#################################################\n",
    "\n",
    "@app.route(\"/\")\n",
    "def welcome():\n",
    "    \"\"\"List all available api routes.\"\"\"\n",
    "    return (\n",
    "        f\"Available Routes:<br/>\"\n",
    "        f\"/api/v1.0/precipitation\"\n",
    "        f\"/api/v1.0/stations\"\n",
    "    )\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/precipitation\")\n",
    "def station():\n",
    "    # Create our session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    \"\"\"Return a list of all passenger names\"\"\"\n",
    "    # Query all passengers\n",
    "    results = session.query(Station.station).all()\n",
    "\n",
    "    session.close()\n",
    "\n",
    "    # Convert list of tuples into normal list\n",
    "    all_station = list(np.ravel(results))\n",
    "\n",
    "    return jsonify(all_station)\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/precipitation\")\n",
    "def precipitation():\n",
    "    # Create our session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    \"\"\"Return a list of passenger data including the name, age, and sex of each passenger\"\"\"\n",
    "    # Query all passengers\n",
    "    results = session.query(Measurement.date, Measurement.prcp).all()\n",
    "\n",
    "    session.close()\n",
    "\n",
    "    # Create a dictionary from the row data and append to a list of all_passengers\n",
    "    all_measurement = []\n",
    "    for date, prcp in results:\n",
    "        measurement_dict = {}\n",
    "        measurement_dict[\"date\"] = date\n",
    "        measurement_dict[\"prcp\"] = prcp\n",
    "        all_measurement.append(measurement_dict)\n",
    "\n",
    "    return jsonify(all_measurement)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Close Session\n",
    "session.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
